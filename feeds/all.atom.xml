<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wisdom Eludes Me</title><link href="/" rel="alternate"></link><link href="http://quelgar.github.com/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2013-07-03T00:00:00+10:00</updated><entry><title>De-suckifying the java.net.URI API with AsymmetricÂ Lenses</title><link href="/de-suckifying-the-javaneturi-api-with-asymmetric-lenses.html" rel="alternate"></link><updated>2013-07-03T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2013-07-03:de-suckifying-the-javaneturi-api-with-asymmetric-lenses.html</id><summary type="html">&lt;p&gt;I find I&amp;#8217;m using the &lt;code&gt;java.net.URI&lt;/code&gt; class quite a bit these days. It has two good features: first, it follows the relevant RFCs to the letter; and second, it&amp;#8217;s&amp;nbsp;immutable.&lt;/p&gt;
&lt;p&gt;The downside of this class is the &lt;span class="caps"&gt;API&lt;/span&gt; - it&amp;#8217;s very, well, &lt;em&gt;Java&lt;/em&gt;. Actually, it&amp;#8217;s bad even by contemporary Java standards. Lets say we wanted to add an argument to the query string of an existing &lt;span class="caps"&gt;URI&lt;/span&gt;. Here&amp;#8217;s how you might do it in Java (transliterated to&amp;nbsp;Scala):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;addQueryArgJava&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;origQuery&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getQuery&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getQuery&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getScheme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAuthority&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPath&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origQuery&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo=bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFragment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ugh, &lt;em&gt;that&amp;#8217;s&lt;/em&gt; going to get old fast. And of course, this primitive string appending probably won&amp;#8217;t do what you want if the original &lt;span class="caps"&gt;URI&lt;/span&gt; already had a &amp;#8220;foo&amp;#8221;&amp;nbsp;argument.&lt;/p&gt;
&lt;p&gt;If we were to implement &lt;span class="caps"&gt;URI&lt;/span&gt; in Scala, we&amp;#8217;d probably use a case class, in which case the compiler would give us a free &lt;code&gt;copy&lt;/code&gt; method to help out with this kind of thing. But we can add a &lt;code&gt;copy&lt;/code&gt; method to &lt;code&gt;java.net.URI&lt;/code&gt; without too much trouble. Let&amp;#8217;s do away with all the null and -1 unpleasantness while we&amp;#8217;re at&amp;nbsp;it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.net.&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;

&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RichURI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;AnyVal&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getScheme&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;userInfo&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUserInfo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHost&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPort&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getQuery&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFragment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orNull&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orNull&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orNull&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;getOrElse&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orNull&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orNull&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orNull&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.google.com/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ftp://www.google.com/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code to add the query argument is&amp;nbsp;now:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;addQueryArgCopy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;getOrElse&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo=bar&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Less boilerplate, but still not great. There&amp;#8217;s many ways we&amp;#8217;re could improve on this, but I&amp;#8217;m going to focus on what I think is the best tool for this job: &lt;em&gt;asymmetric lenses&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A Java programmer could intuitively think of an asymmetric lens as the functional programming version of a bean property, without the mutability nightmares. A Scala programmer could think of it as a scalable version of the &lt;code&gt;copy&lt;/code&gt; method. An asymmetric lens is basically a means to work with fields within immutable records. I&amp;#8217;m using the terms &amp;#8220;field&amp;#8221; and &amp;#8220;record&amp;#8221; in a very general sense, the &amp;#8220;field&amp;#8221; could be a particular key in a &amp;#8220;record&amp;#8221; that is dictionary map, for example. A lens reifies the mechanics of reading a writing a field into a &lt;em&gt;composable&lt;/em&gt; value. As I will attempt to demonstrate, it is the composability of lenses that makes them so&amp;nbsp;powerful.&lt;/p&gt;
&lt;p&gt;In the post I&amp;#8217;m just going to cover how lenses can help us with a particular example problem. For more details on what they are and how they work, I highly recommend &lt;a href="http://days2012.scala-lang.org/sites/days2012/files/morris_lenses.pdf"&gt;this paper&lt;/a&gt; by Tony Morris. It uses Scala and is very easy to follow. All the code from this post, as well as the lens implementation it uses can be found in &lt;a href="https://gist.github.com/quelgar/5819633"&gt;this gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Defining a lens is pretty straight-forward: you provide a function to read the relevant field, and a function to set the field. As we&amp;#8217;re talking about immutable records, &amp;#8220;setting&amp;#8221; a field means returning a new record which has the new value for the field. Unfortunately, this step tends to require a lot of boilerplate in plain Scala. But as we&amp;#8217;ll see, you at least only need to do the boilerplate once. There has been some work done to automate much of the boilerplate via compiler plugins or macros, but I haven&amp;#8217;t tried these out&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;So lets define some lenses for the fields of the &lt;code&gt;java.net.URI&lt;/code&gt; class. I&amp;#8217;m calling the type of my asymmetric lens &lt;code&gt;@&amp;gt;&lt;/code&gt; as I think it looks quite nice with infix notation. You read it as &amp;#8220;record_type @&amp;gt;&amp;nbsp;field_type&amp;#8221;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;lens&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userInfo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userInfo&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pathString&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is using the &lt;code&gt;copy&lt;/code&gt; method listed above. As I said, this very boilerplatey, but now we&amp;#8217;ll never have call the &lt;code&gt;copy&lt;/code&gt; method ever again. The &lt;code&gt;Lens&lt;/code&gt; constructor takes two arguments: the first is simply a function to return the field value given an instance of the record, and the second is a curried function taking a field value and a record value, and producing a new record value. All of these particular lenses return an optional value, simply because each element of a &lt;span class="caps"&gt;URI&lt;/span&gt; is optional (an empty string is a valid&amp;nbsp;&lt;span class="caps"&gt;URI&lt;/span&gt;!).&lt;/p&gt;
&lt;p&gt;So here&amp;#8217;s how we&amp;#8217;d use a lens to add to the query&amp;nbsp;string:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;addQueryArgLensString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;lens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;getOrElse&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo=bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hmm, not really an improvement over the copy method, is it? But we can do better. Let&amp;#8217;s make another lens for the query string, but this time we&amp;#8217;ll parse the query string to make a &lt;code&gt;URI @&amp;gt; Map[String, String]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// note - not production quality parsing&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;([^=&amp;amp;]+)=([^&amp;amp;]+)&amp;amp;?&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryString&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queryString&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAllMatchIn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))).&lt;/span&gt;&lt;span class="n"&gt;toMap&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;getOrElse&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toQueryString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$k=$v&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;mkString&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;lens&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toQueryString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How does this help? Well, we can also define a lens that will &amp;#8220;focus&amp;#8221; on a given key of any &lt;code&gt;Map&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;mapLens&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_:&lt;/span&gt; &lt;span class="kt"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;getOrElse&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we compose these two lenses, to focus not just on the query string, but the &amp;#8220;foo&amp;#8221; argument within the query string (I have written compose as &lt;code&gt;&amp;gt;=&amp;gt;&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;addQueryArgLens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;lens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapLens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This avoids having to manipulate strings or manually copy objects, and if the query string already has a &amp;#8220;foo&amp;#8221; argument, its value will simply be replaced. Let&amp;#8217;s do the comparison for removing a query string&amp;nbsp;argument:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Java version of removing query argument &amp;quot;foo&amp;quot;, if it is present.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;removeFooArgJava&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo=([^&amp;amp;]+)&amp;amp;?&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getQuery&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getQuery&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;newQuery&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replaceFirst&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getScheme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAuthority&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPath&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;newQuery&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFragment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;removeFooArgLens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;lens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapLens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And naturally, this new &amp;#8220;foo&amp;#8221; lens can be composed with others. So if, say, the &lt;span class="caps"&gt;URI&lt;/span&gt; was the field of some other case class, all you have to do is define a lens for that field and then compose it with whatever you need, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// more fields&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;hrefLens&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Example&lt;/span&gt; &lt;span class="kt"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Lens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;â¦&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;exampleWithFoo&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hrefLens&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapLens&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I really hope the Scala team can one day include lenses in the Scala standard library. Scala&amp;#8217;s motto is &amp;#8220;a Scalable language&amp;#8221;. Well, the &lt;code&gt;copy&lt;/code&gt; method definitely doesn&amp;#8217;t scale&amp;nbsp;well:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;exampleWithFoo&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toQueryString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And in real code, record/field hierarchies can get a lot more complex than&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s more cool stuff that can be done with lenses. A &lt;em&gt;partial&lt;/em&gt; asymmetric lens can be convenient for manipulating values that may be absent. And lenses work really well with the state monad. See the above referenced &lt;a href="http://days2012.scala-lang.org/sites/days2012/files/morris_lenses.pdf"&gt;paper&lt;/a&gt; for&amp;nbsp;details.&lt;/p&gt;</summary><category term="scala"></category><category term="programming"></category></entry><entry><title>Deploying a Play Application onÂ Ubuntu</title><link href="/deploying-a-play-application-on-ubuntu.html" rel="alternate"></link><updated>2013-03-28T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2013-03-28:deploying-a-play-application-on-ubuntu.html</id><summary type="html">&lt;p&gt;The more I use the &lt;a href="http://www.playframework.com"&gt;Play Web Framework&lt;/a&gt;, the more I like it. The &amp;#8220;dev mode&amp;#8221; is great, compiling everything that&amp;#8217;s changed on the fly, including the statically checked routes and templates. But sooner or later we want to deploy our app for&amp;nbsp;reals.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;dist&lt;/code&gt; target will package up your app into a zip file with a simple shell script to launch it. That&amp;#8217;s fine as far as it goes, but of course I want to run it as a proper service that starts automatically when the machine boots and can be easily shutdown and restarted. My production &lt;span class="caps"&gt;OS&lt;/span&gt; of choice is Ubuntu. Let&amp;#8217;s do&amp;nbsp;this.&lt;/p&gt;
&lt;h1&gt;Upstart&lt;/h1&gt;
&lt;p&gt;I only learned about &lt;a href="http://upstart.ubuntu.com"&gt;Upstart&lt;/a&gt; recently while researching this problem. It&amp;#8217;s essentially an improved version of the traditional System V init system. This discovery made me very glad I chose Ubuntu, as Upstart is both powerful and remarkably simple to use once you know the basics. The &lt;a href="http://upstart.ubuntu.com/cookbook/"&gt;Upstart &amp;#8220;cookbook&amp;#8221;&lt;/a&gt; might look a bit intimidating at first, but after a bit of playing around I found it was quite simple to do what I&amp;nbsp;wanted.&lt;/p&gt;
&lt;p&gt;By the way, Ubuntu still has the traditional System V init thing as well. I was happily using that for ages without any idea that it had a whole other more advanced init system controlling it. This is because Debian still uses the System V init by default, so all Debian packages use System V, and Ubuntu doesn&amp;#8217;t want to re-do all that&amp;nbsp;work.&lt;/p&gt;
&lt;h1&gt;Steps&lt;/h1&gt;
&lt;p&gt;This is how I got my Play server running with Upstart. This was all done on Ubuntu 12.10 and seems to be working well so far. Obviously, there are a number of choices I&amp;#8217;ve made that could be made differently, so this is not the only way to do&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;1. System user for&amp;nbsp;Play&lt;/h2&gt;
&lt;p&gt;I wanted a user dedicated to running Play servers.&amp;nbsp;Easy:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo adduser --system play
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Unzip your Play&amp;nbsp;app&lt;/h2&gt;
&lt;p&gt;Just unzip your Play app somewhere. For this explanation, I&amp;#8217;m going to assume it&amp;#8217;s unzipped to &lt;code&gt;/play/myapp-1.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;play&lt;/code&gt; user will need to be able to write to the app&amp;#8217;s&amp;nbsp;directories:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo chown -R play:adm /play/myapp-1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. Create an Upstart configuration&amp;nbsp;file&lt;/h2&gt;
&lt;p&gt;All Upstart &amp;#8220;jobs&amp;#8221; are defined by a file in &lt;code&gt;/etc/init&lt;/code&gt; named &lt;code&gt;jobname.conf&lt;/code&gt;. The &amp;#8220;jobname&amp;#8221; bit is what you call the job when starting it or checking its status or whatever. So let&amp;#8217;s create a file &lt;code&gt;/etc/init/myapp.conf&lt;/code&gt; as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# Upstart configuration for myapp Play application

description &amp;quot;Magellan Config Server&amp;quot;

start on runlevel [2345]
stop on runlevel [!2345]

setuid play

console log

env PLAY_DIR=/play/myapp-1.0
env JAVA_HOME=/usr/lib/jvm/jre1.7.0_17

exec $JAVA_HOME/bin/java -Dhttp.port=9001 -classpath $PLAY_DIR/lib/\* play.core.server.NettyServer $PLAY_DIR
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this stuff (known as &lt;em&gt;stanzas&lt;/em&gt;) is described in the above mentioned Upstart cookbook, but I&amp;#8217;ll go through it&amp;nbsp;briefly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;start on&lt;/code&gt;/&lt;code&gt;stop on&lt;/code&gt; lines indicate that these actions are triggered by changes in the system&amp;#8217;s runlevel. Upstart uses runlevels just like System V, and on Ubuntu levels 2 through 5 are all the same. There are many events that can be used to trigger start and stop, but for a standalone daemon process, these do the&amp;nbsp;job.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;setuid&lt;/code&gt; stanza means the job will be executed as the specified user instead of root. This seems like a simple thing, but you&amp;#8217;d be amazed how fiddly it can be to do this via traditional means if you need to pass environment variables&amp;nbsp;through.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;console log&lt;/code&gt; stanza means that stdout and stderr are redirected to &lt;code&gt;/var/log/upstart/myapp.log&lt;/code&gt;. This was useful when debugging why my job wasn&amp;#8217;t starting. I&amp;#8217;m going to change it to &lt;code&gt;console none&lt;/code&gt; on my server as I no longer need this&amp;nbsp;log.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m just using the &lt;code&gt;env&lt;/code&gt; stanzas to break out the path settings. There&amp;#8217;s seems to be a whole lot more they can be used for in Upstart, but I haven&amp;#8217;t needed to worry about that&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;exec&lt;/code&gt; stanza specifies the command to run to run the job. This is basically the command from the &lt;code&gt;start&lt;/code&gt; script that Play provides for us. I&amp;#8217;ve just replaced the explicit listing of all the jars with the newer classpath wildcard feature, and specified the port for Play to&amp;nbsp;use.&lt;/p&gt;
&lt;h2&gt;4. Start&amp;nbsp;it&lt;/h2&gt;
&lt;p&gt;Upstart jobs are controlled by the &lt;code&gt;initctl&lt;/code&gt; command. But there are various alias commands to save some typing. For example, &lt;code&gt;sudo start foo&lt;/code&gt; is the same as &lt;code&gt;sudo initctl start foo&lt;/code&gt;. So, let&amp;#8217;s start our Play&amp;nbsp;app:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo start myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully, you&amp;#8217;ll be rewarded&amp;nbsp;with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;myapp start/running, process 1234
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can confirm&amp;nbsp;with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ps -p 1234
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If something went wrong, check &lt;code&gt;/var/log/upstart/myapp.log&lt;/code&gt; for&amp;nbsp;clues.&lt;/p&gt;
&lt;p&gt;Some other&amp;nbsp;commands:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo status myapp
&lt;span class="gp"&gt;$&lt;/span&gt; sudo stop myapp
&lt;span class="gp"&gt;$&lt;/span&gt; sudo restart myapp
&lt;span class="gp"&gt;$&lt;/span&gt; sudo initctl list  &lt;span class="c"&gt;# list all Upstart jobs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Port&amp;nbsp;80&lt;/h1&gt;
&lt;p&gt;Of course, we like our &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers to use port 80 (and or 443). There are a few ways this can be arranged, here&amp;#8217;s the ones I know&amp;nbsp;of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run as root (don&amp;#8217;t do&amp;nbsp;this)&lt;/li&gt;
&lt;li&gt;Redirect port 80 using the&amp;nbsp;firewall&lt;/li&gt;
&lt;li&gt;Use &lt;a href="http://en.wikipedia.org/wiki/Authbind"&gt;authbind(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use a &lt;span class="caps"&gt;HTTP&lt;/span&gt; reverse proxy. I&amp;#8217;m experimenting with &lt;a href="http://nginx.org"&gt;nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ve used authbind, it&amp;#8217;s pretty straight-forward and works with the &lt;span class="caps"&gt;JVM&lt;/span&gt;. It&amp;#8217;s good when you just have a single server that you want on port&amp;nbsp;80/443.&lt;/p&gt;
&lt;p&gt;As Play apps run standalone with their own embedded Netty web server, an &lt;span class="caps"&gt;HTTP&lt;/span&gt; reverse proxy seems like it will prove quite useful. If you have a bunch of Play apps using different ports, you can use the proxy to make them all appear as part of a single &amp;#8220;server&amp;#8221; on port 80 (distinguished by something like a path in the &lt;span class="caps"&gt;URL&lt;/span&gt; or by the &lt;span class="caps"&gt;HTTP&lt;/span&gt; &amp;#8220;host&amp;#8221; header). Nginx (pronounced &amp;#8220;Engine-X&amp;#8221;) can also do simple load balancing, which should allow us to leverage Play&amp;#8217;s stateless style. I&amp;#8217;m still experimenting with these features at this&amp;nbsp;stage.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I was pleasantly surprised at how easy it was to get my Play app up and running as an Ubuntu service. I had to spend some time learning Upstart, but it was well worth it. Upstart takes care housekeeping such as tracking the service&amp;#8217;s &lt;span class="caps"&gt;PID&lt;/span&gt; for you. Compare the short configuration file above to the System V script included with Ubuntu&amp;#8217;s Tomcat 7 package, which weighs in at 296&amp;nbsp;lines!&lt;/p&gt;</summary><category term="scala"></category><category term="programming"></category><category term="play"></category></entry><entry><title>Do You Get ReferentialÂ Transparency?</title><link href="/do-you-get-referential-transparency.html" rel="alternate"></link><updated>2012-07-15T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2012-07-15:do-you-get-referential-transparency.html</id><summary type="html">&lt;p&gt;Do you get referential transparency? I mean, really &lt;em&gt;get&lt;/em&gt; it? I thought I did, but I recently gained a deeper appreciation for what it&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;Referential transparency is also commonly referred to as &amp;#8220;pure&amp;#8221; functional programming. I understood this to mean that the code lacked side effects like performing I/O or mutating state, and this seems to be a common understanding. But referential transparency can actually be defined quite precisely and succinctly (although I believe agreement with this definition would be far from&amp;nbsp;universal):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If replacing expression x by its value produces the same behaviour, then x is referentially&amp;nbsp;transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds simple enough. But notice that this definition contains no reference to I/O or state or any of the things usually associated with lack of referential transparency; keep that in mind. The above definition is the &lt;em&gt;entire&lt;/em&gt; definition: if replacing an expression by its value produces no change in program behaviour, then you have referential transparency, &lt;em&gt;regardless of what the behaviour is&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, consider the following example, using Scala (you will need to understand &lt;a href="http://docs.scala-lang.org/tutorials/FAQ/yield.html"&gt;how Scala translates&lt;/a&gt; &lt;code&gt;for&lt;/code&gt; syntax to &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; method calls to follow&amp;nbsp;this):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="cm"&gt;/** Log a message without a value */&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;((),&lt;/span&gt; &lt;span class="nc"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

  &lt;span class="cm"&gt;/** Log a message with a value */&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;logv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above is a very basic writer monad. Let&amp;#8217;s put it to use in a silly&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Writer.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logv&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Add one to a number and log a message.&lt;/span&gt;
&lt;span class="cm"&gt; * Referentially transparent.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;addOneAndLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;logv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;added 1 to &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;log1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;before&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;addOneAndLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;addOneAndLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the code so far has been pure functional, that is, referentially transparent. What we have done is made an ordinary value, &lt;code&gt;log1&lt;/code&gt; that produces an integer value, while also accumulating logging messages, which could be thought of as really simple instructions to &amp;#8220;log this message&amp;#8221;. At some point we decide we want to display these log messages to the user, so we write a method to &amp;#8220;run&amp;#8221; the accumulated logging instructions, which requires a non-referentially transparent&amp;nbsp;function:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Side-effect! Prints log messages to stdout.&lt;/span&gt;
&lt;span class="cm"&gt; * Not referentially transparent.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*log* %s%n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output of &lt;code&gt;printf("result1 = %d%n", run(log1))&lt;/code&gt; is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;*log* before
*log* added 1 to 41
*log* added 1 to 41
*log* after
result1 = 84
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as expected. Notice that the &lt;code&gt;addOneAndLog(41)&lt;/code&gt; expression is repeated twice. What if we replace that with a single&amp;nbsp;value:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addOneAndLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;before&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
  &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
  &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What log messages would you expect from &lt;code&gt;printf("result2 = %d%n", run(log2))&lt;/code&gt;? We get exactly the same log messages as for &lt;code&gt;log1&lt;/code&gt;. This is because the expression we factored out was referentially transparent: replacing it by its final value changes absolutely nothing about how the code&amp;nbsp;behaves.&lt;/p&gt;
&lt;p&gt;I thought I had a good handle on all this functional stuff, when I made a change like that between &lt;code&gt;log1&lt;/code&gt; and &lt;code&gt;log2&lt;/code&gt; to some production code. I was surprised to see output still showing up twice, and it took me a few minutes to figure out I was seeing referentially transparency in action. This made me realise that so many of my expectations are still conditioned by years of programming with imperative, side-effecting code. Perhaps when I find the &lt;em&gt;lack&lt;/em&gt; of referential transparency surprising I can officially call myself a functional&amp;nbsp;programmer.&lt;/p&gt;
&lt;p&gt;One very interesting thing to note is that the need for I/O in no way precludes the use of referentially transparent code. Some might say at this point &amp;#8220;but you&amp;#8217;re cheating, the run function is not referentially transparent!&amp;#8221;. Yes, all referentially transparent code will end up being translated to a series of side effects in order to run on a real machine. The fact that some of this translation happens in the same language used to write our pure code is a detail of no great&amp;nbsp;significance.&lt;/p&gt;
&lt;p&gt;But if side effects are always unavoidable at some point, why bother worrying about referential transparency at all? Well, my experience has been that after maximising pure code, you&amp;#8217;ll find that whatever side effecting code you need tends to be very simple and self-contained, and does not get in the way of composition the way it would in a &amp;#8220;traditional&amp;#8221; imperative program. The composition of large programs from smaller programs is the power that referential transparency gives you. Of course, we&amp;#8217;ve come up with many way to compose bits of code together, but they all suck compared to referential transparency. I think that the relative simplicity of the concept (notwithstanding occasional surprises for those of us new to it) sometimes blinds us to just how powerful it really&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;If my toy logging example hasn&amp;#8217;t convinced you that this is a good way to write programs, perhaps a slightly (only slightly) less trivial example will help. Like many ideas, the benefits only really become apparent when you start scaling up. &lt;a href="https://gist.github.com/3114349"&gt;This gist&lt;/a&gt; contains a program that interleaves the following: reading from the console, writing to the console, and reading from the file system, all driven from code that is referentially&amp;nbsp;transparent.&lt;/p&gt;</summary><category term="scala"></category><category term="programming"></category></entry><entry><title>Lying to Stop Same SexÂ Marriage</title><link href="/lying-to-stop-same-sex-marriage.html" rel="alternate"></link><updated>2012-05-13T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2012-05-13:lying-to-stop-same-sex-marriage.html</id><summary type="html">&lt;p&gt;So it so happened that Ten News was on the &lt;span class="caps"&gt;T.V.&lt;/span&gt; at our place tonight (this is in Melbourne, Australia). Nothing remarkable until &lt;a href="http://ten.com.au/video-player.htm?movideo_m=188000&amp;amp;movideo_p=44243"&gt;a story&lt;/a&gt; about 150 doctors issuing a warning that same-sex marriage poses &amp;#8220;health risks&amp;#8221;. The group behind this is called &lt;a href="http://www.doctors4family.com.au/"&gt;Doctors For The Family&lt;/a&gt;, which calls itself a &amp;#8220;medical organisation to highlight the health aspects of marriage&amp;#8221;. Ten just described them as &amp;#8220;a conservative medical group&amp;#8221;, a term that to me seems nonsensical. But I immediately thought &amp;#8220;I bet it&amp;#8217;s a Christian fundamentalist&amp;nbsp;front&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The Doctors For The Family web site is remarkably coy about who is behind it. But the group is run by the chap in the Ten story, who lists himself as the founder on his &lt;a href="http://au.linkedin.com/pub/lachlan-dunjey/1a/b72/5bb?_mSplash=1"&gt;LinkedIn profile&lt;/a&gt;: Dr Lachlan Dunjey. From this and &lt;a href="http://www.churchinperth.com/articles/ldunjey/index.htm"&gt;some other pages&lt;/a&gt; we learn some facts about Dr Dunjey that seem&amp;nbsp;relevant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;He was the Senate candidate for the Christian Democratic Party at the 2004 federal&amp;nbsp;election&amp;#8221;&lt;/li&gt;
&lt;li&gt;Before scaring, sorry, &lt;em&gt;educating&lt;/em&gt; us about the health risks of same-sex marriage he was campaigning for &amp;#8220;freedom of conscience in health care&amp;#8221;, a euphemism for permitting Christian medical professionals to refuse to perform abortions even when medically&amp;nbsp;indicated.&lt;/li&gt;
&lt;li&gt;He says &amp;#8220;we need to change people&amp;#8217;s hearts and minds by bringing them into the Kingdom of&amp;nbsp;God&amp;#8221;&lt;/li&gt;
&lt;li&gt;He&amp;#8217;s really upset about the depraved state of contemporary society, including such debauchery as alcohol being served at Christian wedding&amp;nbsp;receptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, before I get accused of an &lt;em&gt;ad hominem&lt;/em&gt; fallacy, it must be noted that none of this shows that Dr Dunjey&amp;#8217;s claims are false. However, I do believe it gives us good reason to be very skeptical of his group&amp;#8217;s claims, especially as to whether the term &amp;#8220;medical&amp;#8221; is&amp;nbsp;merited.&lt;/p&gt;
&lt;p&gt;The so-called medical evidence presented by Doctors For The Family seems very dodgy. Credible medical organisations generally don&amp;#8217;t make claims about whether same-sex relationships are better or worse for children than hetero ones, simply because there&amp;#8217;s no definitive evidence either way. Most &lt;a href="http://people.virginia.edu/~cjp/articles/ffp10b.pdf"&gt;studies&lt;/a&gt; seem to back the (to me, rather common sense) notion that when considering all the factors that affect child development, the sexual orientation of the parents doesn&amp;#8217;t really register as&amp;nbsp;significant.&lt;/p&gt;
&lt;p&gt;Doctors For The Family is essentially another deceitful pseudo-scientific attempt to make fringe religious views appear scientific. Just like the Intelligent Design crowd, they start with a pre-determined conclusion and scour the globe looking for any scrap of data that supports that conclusion. In other words, they follow the scientific method, only exactly backwards. Just because this group is supported by some people with &amp;#8220;Doctor&amp;#8221; on their business cards doesn&amp;#8217;t mean it deserves to be called&amp;nbsp;&amp;#8220;medical&amp;#8221;.&lt;/p&gt;</summary><category term="politics"></category><category term="gay marriage"></category><category term="religion"></category></entry><entry><title>Thoughts on KonyÂ 2012</title><link href="/thoughts-on-kony-2012.html" rel="alternate"></link><updated>2012-03-10T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2012-03-10:thoughts-on-kony-2012.html</id><summary type="html">&lt;p&gt;Watching the &lt;a href="http://www.kony2012.com"&gt;Kony 2012&lt;/a&gt; phenomenon unfold has been interesting. I&amp;#8217;ve come to the conclusion that while the people behind they campaign are well-meaning, its not really useful or helpful. In other words, it&amp;#8217;s pretty typical of campaigns to &amp;#8220;raise awareness&amp;#8221; these&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;It is a rather sad indictment on our mainstream media though. Kony 2012 did not reveal any facts that have not been public knowledge for some time. But get a slick and somewhat emotionally manipulative video to go viral and media outlets are suddenly falling over themselves to show their moral cred by promoting it. But the crimes of the &lt;span class="caps"&gt;L.R.&lt;/span&gt;A., while terrible, are not new. And horrifyingly, on the scale of violence and misery in Africa, the &lt;span class="caps"&gt;L.R.A.&lt;/span&gt; is actually small&amp;nbsp;potatoes.&lt;/p&gt;
&lt;p&gt;On the other hand, the reaction to Kony 2012 has definitely done some good. It has put the spotlight on a part of the world westerners usually pay no attention to, and started a genuinely useful conversation. People knowledgable about Uganda and surrounds have taken the chance to engage in the debate. To pick just one example, see the pieces by Michael Wilkerson in &lt;a href="http://blog.foreignpolicy.com/posts/2012/03/07/guest_post_joseph_kony_is_not_in_uganda_and_other_complicated_things"&gt;Foreign Policy&lt;/a&gt; and &lt;a href="http://www.guardian.co.uk/commentisfree/2012/mar/08/kony-2012-campaign-oprah-and-bracelets"&gt;CiF&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;The Arresting&amp;nbsp;Officer&lt;/h1&gt;
&lt;p&gt;I can&amp;#8217;t help but notice that many supporters of Kony 2012 seem to belong to another group: the &amp;#8220;anti-war&amp;#8221; crowd that has just spent roughly the last ten years decrying Western Imperialism and damning &lt;span class="caps"&gt;U.S.&lt;/span&gt; foreign policy as unmitigated evil. Am I the only one to find this ironic? If the world is to &amp;#8220;stop&amp;#8221; Kony, to which nation would the task fall? To which political leadership is the Kony 2012 campaign directed? Ban Ki-moon and his bureaucrats?&amp;nbsp;Ha.&lt;/p&gt;
&lt;p&gt;As the video shows, President Obama took action against Kony back in October last year. 100 troops were sent to advise the Ugandan forces who are hunting him down. Not huge, but it&amp;#8217;s something, and doing more gets tricky very quickly. And while the video wants you to worry that the &lt;span class="caps"&gt;U.S.&lt;/span&gt; may pull out, there&amp;#8217;s no indication of any plan to leave. At the time, there was no substantial public pressure to take action. There is no American interest at stake, no ulterior motive. Just a desire to bring one of the world&amp;#8217;s worst war criminals to justice. How much time do you think Vladimir Putin has spent thinking about the plight of enslaved African children? What about Hu&amp;nbsp;Jintao?&lt;/p&gt;
&lt;p&gt;Why is the Kony 2012 campaign focused completely on &lt;span class="caps"&gt;U.S.&lt;/span&gt; policy? Or to switch to another example among many: when a Coptic Egyptian calls for aid for his beleaguered minority, why does he address &lt;a href="http://restraintheblade.blogspot.com.au/2010/12/letter-from-coptic-christian.html"&gt;his letter&lt;/a&gt; to the President of the United States? Why do the Syrians who are able to speak freely protest against Russia, not the great power some claim has &amp;#8220;angered Muslims&amp;nbsp;everywhere&amp;#8221;?&lt;/p&gt;
&lt;p&gt;Now, I&amp;#8217;m not trying to defend every foreign intervention by the &lt;span class="caps"&gt;U.S.&lt;/span&gt; as noble or wise. My goal is just to give you something to think about next time you hear someone engage in cheap rhetoric about &amp;#8220;U.S.&amp;nbsp;Imperialism&amp;#8221;.&lt;/p&gt;
&lt;h1&gt;Rush Limbaugh Bonus&amp;nbsp;Feature&lt;/h1&gt;
&lt;p&gt;Just in case you missed this back in October, here&amp;#8217;s &lt;a href="http://gawker.com/5851612/stephen-colbert-comes-to-rush-limbaughs-defense"&gt;Stephen Colbert covering Rush Limbaugh&amp;#8217;s reaction&lt;/a&gt; to the President&amp;#8217;s decision to go after&amp;nbsp;Kony.&lt;/p&gt;</summary><category term="politics"></category><category term="foreign policy"></category></entry><entry><title>Why Iâm a ClimateÂ Skeptic</title><link href="/why-im-a-climate-skeptic.html" rel="alternate"></link><updated>2012-02-07T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2012-02-07:why-im-a-climate-skeptic.html</id><summary type="html">&lt;p&gt;I&amp;#8217;m going to attempt to explain my position on climate change, mostly for my own benefit, perhaps. The controversial and divisive nature of the climate change debate means that a staggering amount is written about it on a daily basis. What can an amateur like me hope to contribute that hasn&amp;#8217;t been better covered elsewhere? I shall attempt to offer a useful perspective. But doing this right means doing it long, so sorry about&amp;nbsp;that.&lt;/p&gt;
&lt;h1&gt;My Road to&amp;nbsp;&amp;#8220;Denial&amp;#8221;&lt;/h1&gt;
&lt;p&gt;For most of my adult life, I have believed that human pollution of the atmosphere was causing destructive changes to the climate, and that this would lead to catastrophe if we didn&amp;#8217;t mend our ways. I know I learnt about the greenhouse effect, and that anthropogenic &lt;span class="caps"&gt;CO&lt;/span&gt;â was making it stronger, in high school; no later than 1989, when I was 16. I recall playing the original &lt;em&gt;Civilization&lt;/em&gt; &lt;span class="caps"&gt;PC&lt;/span&gt; game in circa 1991. In the late stages of the game, when industrialisation was in full swing, the planet would start heating up, resulting in some areas becoming deserts and others jungles. By adopting low pollution technologies, the climate change impacts could be reduced, but not entirely&amp;nbsp;avoided.&lt;/p&gt;
&lt;p&gt;I read Ben Elton&amp;#8217;s books. I listened to what Greenpeace was saying. For a time I was a member of the Australian Democrats, who were the Greens before there were Greens. When I saw &lt;em&gt;An Inconvenient Truth&lt;/em&gt; in 2005, I was thoroughly impressed, and &amp;ndash; this is very embarrassing &amp;ndash; considered buying a Prius.   In the 2007 Australian federal election I voted Green and looked forward to the new Labor government finally doing something about climate&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;In other words, I was a Believer, someone who supported the environmentalist agenda. But not any more. I have actually surprised myself at how rapidly my views changed. I have seriously wondered: am I a total flake, lacking in any real conviction? I report, you&amp;nbsp;decide.&lt;/p&gt;
&lt;p&gt;My first break with environmental orthodoxy was when, in my capacity as an amateur science geek, I started reading about how nuclear power plants actually worked, in detail. It didn&amp;#8217;t take very long to figure out that almost everything environmentalists said about nuclear power and radiation was complete garbage. Most nuclear advocates also push the consensus line on climate change, as they see it as an opportunity to resuscitate the industry in the west. But I found there were some people advocating nuclear power while also expressing skepticism of climate change claims. That seemed&amp;nbsp;weird.&lt;/p&gt;
&lt;p&gt;I was perplexed that the reality of Anthropogenic Global Warming (&lt;span class="caps"&gt;AGW&lt;/span&gt;) was not universally accepted. I started wondering what the skeptics were actually skeptical of. Did they doubt the planet was warming, or merely the influence of humans? I decided I needed to fully understand the skeptical arguments to better counter them. What I discovered was that the skeptical &amp;#8220;side&amp;#8221; actually consists of a somewhat maddening diversity of opinions regarding exactly which aspects of the consensus are wrong. The consensus side, by comparison, was remarkably uniform in its&amp;nbsp;position.&lt;/p&gt;
&lt;p&gt;For a layperson, getting into the contentious scientific issues of climate change is not at all easy. You&amp;#8217;ll find arguments and counter-arguments over virtually everything, and it&amp;#8217;s not easy to tell what is important and what can be ignored. The &lt;span class="caps"&gt;IPCC&lt;/span&gt; reports themselves are almost completely useless for gaining any understanding of the issues. I had expected that the reports were designed to inform the policy debate. But no, they&amp;#8217;re purely technocratic - written by experts, for experts. The best approach I&amp;#8217;ve found is to listen to what experts say the &lt;span class="caps"&gt;IPCC&lt;/span&gt; report says, then confirm that myself as well as I&amp;nbsp;can.&lt;/p&gt;
&lt;p&gt;Eventually, I was able to figure out what the skeptical case is mainly all about. The first thing to understand is that there is relatively little skepticism of &lt;span class="caps"&gt;AGW&lt;/span&gt; itself. Most skeptics accept that the evidence for &lt;span class="caps"&gt;AGW&lt;/span&gt; is strong, and that its very likely real. The skepticism is about the magnitude of the anthropogenic influence, and whether we are facing a catastrophe. A more accurate label for &amp;#8220;Climate change skeptics&amp;#8221; would &amp;#8220;climate catastrophe skeptics&amp;#8221;. No one (fringe religious nuts excluded) is denying that the climate is changing. One of the central planks of the skeptical argument is that the climate is always changing, and we should not necessarily be concerned when we observe&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;The basic argument for &lt;span class="caps"&gt;AGW&lt;/span&gt; goes like&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The average temperature of the planet has increased since circa&amp;nbsp;1940&lt;/li&gt;
&lt;li&gt;Anthropogenic &lt;span class="caps"&gt;CO&lt;/span&gt;â emissions have risen steadily since circa&amp;nbsp;1940&lt;/li&gt;
&lt;li&gt;Adding atmospheric &lt;span class="caps"&gt;CO&lt;/span&gt;â makes the greenhouse effect stronger, which makes the planet&amp;nbsp;warmer&lt;/li&gt;
&lt;li&gt;Ergo, anthropogenic &lt;span class="caps"&gt;CO&lt;/span&gt;â emissions are warming the&amp;nbsp;planet&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When a consensus person is impressing you with the strength of their evidence, they are usually supporting the above points. And when they ridicule the &amp;#8220;denial&amp;#8221; of science by skeptics, they are usually saying that skeptics deny the above. The thing is that most skeptics &lt;em&gt;accept&lt;/em&gt; the above points. Now, there are valid scientific debates about each of these items, believe it or not. It&amp;#8217;s not all completely settled. But overall, there seems to be agreement across both skeptics and warmists that the above points have pretty solid evidence to support them. Skeptics &lt;em&gt;have&lt;/em&gt; spent much effort trying to show that point 1 is not as strong as we&amp;#8217;ve been led to believe; but while there is undoubtedly problems with the instrumental temperature record, the bottom line conclusion seems to have held&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;So, it&amp;#8217;s case-closed? Shut down &lt;a href="http://en.wikipedia.org/wiki/Hazelwood_Power_Station"&gt;Hazelwood&lt;/a&gt; and cover the land in wind farms, right? No, it&amp;#8217;s no where near that simple. We have a huge, genuinely incontrovertible, mass of evidence that the earth&amp;#8217;s climate changes all the time, all by itself, without any human influence. Of course, whatever natural climate effects were present in the past didn&amp;#8217;t just disappear when humans started burning coal, oil and gas. So &lt;em&gt;all&lt;/em&gt; the climate observations we make involve some combination of natural and anthropogenic influence (&amp;#8220;forcings&amp;#8221; in the lingo). In order to know what we&amp;#8217;re actually dealing with, we need to understand the strength of the natural vs the anthropogenic forcings. This is called &lt;em&gt;attribution&lt;/em&gt;, and this is where it gets really&amp;nbsp;messy.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s when I started looking into attribution that started doubting the consensus position. There&amp;#8217;s a bunch of details involved that seemed very important and relevant to me, but that I&amp;#8217;d never heard any environmentalist, greenie or consensus scientist even hint at. First thing: the greenhouse warming from &lt;span class="caps"&gt;CO&lt;/span&gt;â is logarithmic. This means that as &lt;span class="caps"&gt;CO&lt;/span&gt;â is added to the atmosphere, the impact of adding more &lt;span class="caps"&gt;CO&lt;/span&gt;â becomes less and less. The standard analogy is to think about painting over a window: the first coat blocks a lot of light, the second coat blocks less light, and so on. Now, I don&amp;#8217;t want to over-emphasise the importance of this &amp;ndash; the &lt;span class="caps"&gt;IPCC&lt;/span&gt; fully takes it into account &amp;ndash; but it was a shock to me because I realised I didn&amp;#8217;t really understand the fundamentals of &lt;span class="caps"&gt;AGW&lt;/span&gt;. My diet of environmentalist propaganda had led me to believe that all those megatons of &lt;span class="caps"&gt;CO&lt;/span&gt;â were going to cause Venus-like runaway warming.&amp;nbsp;Nope.&lt;/p&gt;
&lt;p&gt;Next surprise: the &lt;a href="http://en.wikipedia.org/wiki/Ice_core"&gt;ice cores&lt;/a&gt;. I can only recall one slide in Al Gore&amp;#8217;s entire presentation that dealt with attribution: the slide showing the temperature and &lt;span class="caps"&gt;CO&lt;/span&gt;â graphs from ice core data. He then&amp;nbsp;said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The relationship is actually very complicated but there is one relationship that is far more powerful than all the others and it is this. When there is more carbon dioxide, the temperature gets warmer, because it traps more heat from the sun&amp;nbsp;inside.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And indeed the graphs on the slide show a very close correlation between &lt;span class="caps"&gt;CO&lt;/span&gt;â and temperature. But I learned that Mr Gore was deliberately misleading his audience with this slide. What did he mean when he said the relationship is &amp;#8220;very complicated&amp;#8221;? Well, what the ice cores actually show is temperature increases happen roughly 800 years &lt;em&gt;before&lt;/em&gt; increases in the &lt;span class="caps"&gt;CO&lt;/span&gt;â level. This is not mysterious, it&amp;#8217;s basic physics that as the oceans warm up they will release more of their dissolved &lt;span class="caps"&gt;CO&lt;/span&gt;â into the atmosphere. So it&amp;#8217;s actually not that &amp;#8220;complicated&amp;#8221;, Mr Gore just didn&amp;#8217;t feel like explaining&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The ice cores were once one of the best pieces of evidence that &lt;span class="caps"&gt;CO&lt;/span&gt;â had a strong influence on temperature. Initially the resolution of samples was not so high, and it did indeed appear that &lt;span class="caps"&gt;CO&lt;/span&gt;â and temperature increased together. Then scientists were able to improve the resolution and see that temperature changed before &lt;span class="caps"&gt;CO&lt;/span&gt;â. The consensus now tries to act like this was totally expected. The claim now is that the planet starts warming (due to a cause we can only speculate about), this causes more &lt;span class="caps"&gt;CO&lt;/span&gt;â to enter the atmosphere, which then amplifies the warming (this is somehow not speculation). I find the best way to evaluate claims like this is to imagine if the result had come out the other way; if the cores had shown temperature increasing after &lt;span class="caps"&gt;CO&lt;/span&gt;â, do you think they would say &amp;#8220;oh, we didn&amp;#8217;t predict that!&amp;#8221; Of course not, it would be (with some justification) trumpeted as evidence of &lt;span class="caps"&gt;CO&lt;/span&gt;â being a major driver of climate change. The ice core data presents other problems for theories of &lt;span class="caps"&gt;CO&lt;/span&gt;â-driven climate catastrophe: despite the &amp;#8220;amplification&amp;#8221; going on, the warming somehow stops long before anything catastrophic happens. And when the temperature falls, &lt;span class="caps"&gt;CO&lt;/span&gt;â levels stay high for over a thousand years. A far simpler explanation for the ice core data is that &lt;span class="caps"&gt;CO&lt;/span&gt;â levels respond slowly to temperature changes, but do not significantly drive temperature&amp;nbsp;changes.&lt;/p&gt;
&lt;h1&gt;Sensitivity and&amp;nbsp;Feedbacks&lt;/h1&gt;
&lt;p&gt;Next shock: when it comes to the total greenhouse effect of the earth, &lt;span class="caps"&gt;CO&lt;/span&gt;â is only a minor contributor. The most significant player is water vapour, by quite a margin. So how exactly does &lt;span class="caps"&gt;CO&lt;/span&gt;â act as the climate bogey-man? (Someone familiar with climate science might say &amp;#8220;&lt;em&gt;duh&lt;/em&gt;, climate scientists have always acknowledged the importance of water&amp;#8221;. That is so, but I had listened to a lot of alarmists and never heard it&amp;nbsp;mentioned.)&lt;/p&gt;
&lt;p&gt;At this point, I have to introduce the notion of &lt;em&gt;climate sensitivity&lt;/em&gt;. This is not a thing that is part of the physics of the climate, it&amp;#8217;s basically a rough measure of how much warming we get from increasing &lt;span class="caps"&gt;CO&lt;/span&gt;â levels. For laypeople who are mainly interested in policy implications, the sensitivity is usually expressed as the temperature increase caused by doubling &lt;span class="caps"&gt;CO&lt;/span&gt;â, both relative to pre-industrial levels (the doubling will occur circa 2070 assuming current trends). The last &lt;span class="caps"&gt;IPCC&lt;/span&gt; report says the climate sensitivity is probably 3.3â, but the range of possible values is 2.0â to 4.5â. The skeptics think it is significantly lower. If you want the science of the climate change debate boiled down to its essence, it is the determination of this&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Now, it turns out we can use laboratory experiments to work out a reasonably accurate (for climate science) value for how much warming we get from adding &lt;span class="caps"&gt;CO&lt;/span&gt;â. A climate sensitivity of around 1.2â from &lt;span class="caps"&gt;CO&lt;/span&gt;â warming alone is widely accepted by both warmists and skeptics. Huh? That&amp;#8217;s a lot less than&amp;nbsp;3.3â.&lt;/p&gt;
&lt;p&gt;The discrepancy is because the lab experiments measure the &lt;span class="caps"&gt;CO&lt;/span&gt;â effect in isolation, but in the real climate all forcings like this are subject to feedbacks. We know of the existence of many feedbacks, both positive and negative, in the climate system. The problem is we have very little idea of how strong any of them are compared to the others. One of the major feedback components is water vapour in the atmosphere. The &lt;span class="caps"&gt;IPCC&lt;/span&gt; says that when increased &lt;span class="caps"&gt;CO&lt;/span&gt;â levels make the planet slightly warmer, this causes the atmosphere to hold more water vapour. Water vapour is the strongest greenhouse gas, so the earth gets even warmer. Of course, I&amp;#8217;m leaving out a huge amount of detail in all this, much of which I don&amp;#8217;t completely understand. But I think it&amp;#8217;s correct to say that water vapour feedback constitutes the bulk of the warming the &lt;span class="caps"&gt;IPCC&lt;/span&gt; says we&amp;#8217;ll get beyond the 1.2â direct&amp;nbsp;forcing.&lt;/p&gt;
&lt;p&gt;I just want to take a quick aside to emphasise how completely, utterly, totally bogus it is to refer to &lt;span class="caps"&gt;CO&lt;/span&gt;â (or even worse, &amp;#8220;carbon&amp;#8221;) as &amp;#8220;pollution&amp;#8221;. If you accept the argument that the mere fact it&amp;#8217;s possible to accumulate too much of something means it should be called a pollutant, then you have to be consistent. Most of the warming the &lt;span class="caps"&gt;IPCC&lt;/span&gt; predicts comes not from &lt;span class="caps"&gt;CO&lt;/span&gt;â, but HâO. Therefore, &lt;em&gt;water&lt;/em&gt; is a pollutant, and a more significant one than &amp;#8220;carbon&amp;#8221;. &lt;em&gt;Reductio ad absurdum&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The big issue with water vapour in the atmosphere is that it will sometimes form clouds. Clouds can both warm and cool the earth&amp;#8217;s surface. This means that adding water vapour to the atmosphere produces both positive and negative feedbacks. I think it&amp;#8217;s fair to say that there&amp;#8217;s few aspects of the climate that we understand less well than clouds. The bottom line is we can only speculate about what the net water vapour feedback is. We can&amp;#8217;t even say with any certainty whether the feedback is negative or positive&amp;nbsp;overall.&lt;/p&gt;
&lt;p&gt;So in order to know what the climate sensitivity is, we need to know how the feedbacks work. But we don&amp;#8217;t know that, so we use various means to try to estimate the likely range. I think you can pick any value for the climate sensitivity between 0â and 6â and you&amp;#8217;ll be able to find one or more peer-reviewed scientific papers that say that could be the value. The &lt;span class="caps"&gt;IPCC&lt;/span&gt;&amp;#8217;s estimate of 2.0â to 4.5â seems to have been arrived at almost entirely via modelling. This range requires net feedbacks to be&amp;nbsp;positive.&lt;/p&gt;
&lt;p&gt;The sign and magnitude of the feedbacks is the difference between major catastrophe and an effect so small it cannot be noticed against natural variation. But the direct empirical evidence for a net strong positive feedback is virtually non-existent. Models, combined with the argument &amp;#8220;we know of no other cause of 20th century warming&amp;#8221; (I&amp;#8217;m not making that up, &lt;a href="http://news.bbc.co.uk/2/hi/science/nature/8511670.stm"&gt;they actually say that&lt;/a&gt;) are all that supports&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;On the other hand, there are increasingly good reasons to think the net feedback is slightly negative. For one, almost all natural systems that have reached a stable or meta-stable state are governed by negative feedback. The fact that the earth&amp;#8217;s climate doesn&amp;#8217;t constantly careen from one extreme state to the next indicates that negative feedback probably dominates (it&amp;#8217;s also worth noting another factoid never spoken of by the consensus &amp;ndash; over the entire history of the earth, today&amp;#8217;s &lt;span class="caps"&gt;CO&lt;/span&gt;â levels are relatively low). And there&amp;#8217;s the fact that the warming predicted is just not eventuating. For over ten years now, the various temperature records, surface, satellite, ocean, have all been &lt;em&gt;flat&lt;/em&gt;. All while &lt;span class="caps"&gt;CO&lt;/span&gt;â levels have continued to&amp;nbsp;rise.&lt;/p&gt;
&lt;p&gt;The way the consensus is sold is by focusing entirely on the strong part of their theory &amp;ndash; that human &lt;span class="caps"&gt;CO&lt;/span&gt;â emissions make the planet slightly warmer. But the chain of reasoning should be judged by the weakest link, which is that the warming will be catastrophic due to positive&amp;nbsp;feedback.&lt;/p&gt;
&lt;h1&gt;Climate&amp;nbsp;Models&lt;/h1&gt;
&lt;p&gt;Climate models are just computer programs. I don&amp;#8217;t pretend to understand all the details of how they work, but I will attempt to give a fair summary. They are written to simulate what we know and what we think we know about the physics of the earth&amp;#8217;s climate. They take into account all known climate forcings (solar activity for example) and all known feedback mechanisms. You end up with a big pile of parameters in the model, the values of which cannot be determined by observation with any great certainty. These parameters are set by a combination of simple assumption, combined with tuning the output of the model to match certain historical records. The &lt;span class="caps"&gt;IPCC&lt;/span&gt; (ok, not them directly, the scientists whose papers they rely on) then re-run the models with anthropogenic &lt;span class="caps"&gt;CO&lt;/span&gt;â left out, find that the results don&amp;#8217;t match history, and from this conclude that their assumptions of positive feedback are correct and that &lt;span class="caps"&gt;CO&lt;/span&gt;â is the main driver of global warming. And this is how the value for climate sensitivity is arrived at - the models say that earth with &lt;span class="caps"&gt;CO&lt;/span&gt;â doubled is 3.3â warmer than earth with &lt;span class="caps"&gt;CO&lt;/span&gt;â&amp;nbsp;unchanged.&lt;/p&gt;
&lt;p&gt;You may be thinking that I&amp;#8217;m either lying or mistaken here, because that sounds &lt;em&gt;completely bloody crazy&lt;/em&gt;. It&amp;#8217;s simply begging the question. Well I&amp;#8217;m not lying, but I could be mistaken. Take a look at the critical &lt;span class="caps"&gt;IPCC&lt;/span&gt; chapter on attribution, especially &lt;a href="http://www.ipcc.ch/publications_and_data/ar4/wg1/en/faq-9-2.html"&gt;pp 702-703&lt;/a&gt; and decide for yourself if I&amp;#8217;m being&amp;nbsp;fair.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t yet heard a convincing argument as to why using models like this is evidence of anything. A telling sentence on page 702 referenced above is &amp;#8220;Numerous experiments have been conducted using climate models to determine the likely causes of the 20th-century climate change&amp;#8221;. The word &amp;#8220;experiments&amp;#8221; here is quite misleading, as in the scientific context it implies you&amp;#8217;re doing something empirical. But all climate models do is answer the question &amp;#8220;if I assume the climate works like this, what are the implications?&amp;#8221; This is undoubtedly useful, but it can&amp;#8217;t tell you if the assumptions you start with are correct. Model outputs are not&amp;nbsp;observations.&lt;/p&gt;
&lt;p&gt;But if the climate model produces results that match real-world historical data, doesn&amp;#8217;t that prove the model&amp;#8217;s assumptions are basically valid? No. A quote from John von Neumann sums it up: &amp;#8220;With four parameters I can fit an elephant, and with five I can make him wiggle his trunk.&amp;#8221; Climate models have many parameters. Like the relative strengths of various feedbacks. But the models also need to account for periods where &lt;span class="caps"&gt;CO&lt;/span&gt;â rose and temperatures fell (the 1970s for example). That&amp;#8217;s where some of the negative temperature forcings come into play, the principle one being &amp;#8220;aerosols&amp;#8221;, which are mainly genuine pollutants like sulphates. We know that aerosols make the earth cooler overall (sometimes called &amp;#8220;global dimming&amp;#8221;) but, again, there&amp;#8217;s huge uncertainty as to the strength of the effect. Because various positive and negative parameters are so poorly constrained by observation, it&amp;#8217;s just a matter of tuning them until your model roughly matches the real-world data. The &lt;span class="caps"&gt;IPCC&lt;/span&gt; uses many climate models, each with different assumptions and producing slightly different future &amp;#8220;scenarios&amp;#8221;. Obviously they can&amp;#8217;t all be correct, but they all match historical data to roughly the same&amp;nbsp;degree.&lt;/p&gt;
&lt;h1&gt;The Bottom&amp;nbsp;Line&lt;/h1&gt;
&lt;p&gt;The heart of the scientific debate about climate change is the issue of attribution. It is a real debate, concerned with real evidence. It is simply not true that the only people not going along with the consensus are few science-denying fools or paid shills for the fossil fuel industry. I didn&amp;#8217;t learn about these issues on my own, there&amp;#8217;s a great many knowledgable people who have come to doubt what climate change activists and the &lt;span class="caps"&gt;IPCC&lt;/span&gt; are telling us. There are very good reasons to doubt the consensus claim that almost all 20th century warming can be attributed to anthropogenic&amp;nbsp;influence.&lt;/p&gt;
&lt;p&gt;What should we do? Well, we can&amp;#8217;t decide on a policy based on climate science alone, we have to examine the available options and their costs. That&amp;#8217;s a whole new rabbit hole, so I won&amp;#8217;t get into it&amp;nbsp;now.&lt;/p&gt;
&lt;h1&gt;Comebacks&lt;/h1&gt;
&lt;p&gt;I would, however, like to address some of the common comebacks to the type of argument I&amp;#8217;ve laid out above. When doubts about the consensus scientific position are raised, usually only professional scientists understand the details will go into bat and defend it. But most people who are advocating &amp;#8220;action&amp;#8221; on climate change aren&amp;#8217;t really able to do this. Instead, it&amp;#8217;s amazing how quickly they will declare the truth of climate science claims as basically irrelevant because of some other overriding&amp;nbsp;reason.&lt;/p&gt;
&lt;h2&gt;1. We Should Look After the&amp;nbsp;Environment&lt;/h2&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;It doesn&amp;#8217;t matter if climate change science is wrong, because we have to look after the environment anyway&amp;#8221;. This argument is actually at the heart of the climate change hysteria. Whenever the catastrophic climate change barrow is pushed, it is invariably linked to pollution and environmental problems generally. But our very real environmental challenges are not causing climate change, nor are they caused by it. Emissions from cars and coal power stations certainly are dirty and can cause environmental problems, but it&amp;#8217;s not the dirty or toxic stuff that makes the greenhouse effect stronger. Neither do oil spills or the myriad of other ways we manage to screw things up. Whatever the merits are of the clean-up-the-planet argument are, it is a separate issue to what&amp;#8217;s going on with the greenhouse effect. Alarming people with tales of climatic disaster is not an honest way to pursue a clean air&amp;nbsp;agenda.&lt;/p&gt;
&lt;p&gt;Australia&amp;#8217;s &amp;#8220;Carbon Price&amp;#8221; is sold as the means to a &amp;#8220;clean energy future&amp;#8221;. So with all the nasty things emitted by fossil fuel combustion (there are many), we put a price on an emission that is not dirty or toxic, and was abundant throughout the biosphere before the first human drew breath. Yeah, that totally makes sense as a clean air&amp;nbsp;policy.&lt;/p&gt;
&lt;p&gt;Just a quick note on something you&amp;#8217;ve probably heard about: that increasing &lt;span class="caps"&gt;CO&lt;/span&gt;â levels are making the oceans &amp;#8220;more acidic&amp;#8221;. The scare mongering about ocean acidification is stopped in its tracks by the elementary observation that the average pH of the oceans is about 8.14. That&amp;#8217;s right, the world&amp;#8217;s oceans are &lt;em&gt;alkaline&lt;/em&gt;. So while it&amp;#8217;s technically correct that increased &lt;span class="caps"&gt;CO&lt;/span&gt;â has made the oceans more acidic, it&amp;#8217;s quite misleading. It&amp;#8217;s more honest to say that the oceans are becoming more neutral, that is, &lt;em&gt;less&lt;/em&gt; corrosive. Claims about the dangers of ocean acidification are just another desperate attempt to make &lt;span class="caps"&gt;CO&lt;/span&gt;â into a dangerous&amp;nbsp;pollutant.&lt;/p&gt;
&lt;h2&gt;2. Fossil Fuels are&amp;nbsp;Bad&lt;/h2&gt;
&lt;p&gt;Related to the previous argument, there is the &amp;#8220;it doesn&amp;#8217;t matter if climate change science is wrong, because fossil fuels are bad and we should stop using them&amp;#8221;. There are indeed plenty of downsides to fossil fuels (and some major upsides too). However, this is again a separate debate from climate change. The various carbon pricing and emission reduction schemes were not sold on the basis that fossil fuels have downsides, they were sold based on predictions of drowned coastlines, dead coral reefs and endless droughts. If you want to make the argument for the negatives of fossil fuels, then make the argument on its own merits, don&amp;#8217;t try to force your agenda with scare tactics about the climate. Oh and having a remotely practical alternative might help,&amp;nbsp;too.&lt;/p&gt;
&lt;h2&gt;3. Idiots whom I hate are climate change&amp;nbsp;skeptics&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been really surprised how often I&amp;#8217;ve heard some variation of this: &amp;#8220;I can&amp;#8217;t be a climate skeptic, because that would mean agreeing with: Tony Abbott, Andrew Bolt, Glenn Beck, assorted conservative religious nuts, et alia&amp;#8221;. I have to admit that I have fallen victim to this line of &amp;#8220;reasoning&amp;#8221; myself in the past, and now do my best to guard against it. Forming your opinion on a matter based on the opinions of people you don&amp;#8217;t respect is manifestly stupid. Need I say&amp;nbsp;more?&lt;/p&gt;
&lt;h2&gt;4. We should act as a&amp;nbsp;precaution&lt;/h2&gt;
&lt;p&gt;The argument goes: &amp;#8220;because we can&amp;#8217;t definitively prove that anthropogenic emissions are not going to destroy the world, we should play it safe and cut emissions&amp;#8221;. This will often be backed up with some demagogic nonsense such as &amp;#8220;we should not gamble with our children&amp;#8217;s future&amp;#8221;. The flaw in this argument becomes obvious when it is applied to an issue other than climate change: &amp;#8220;because we can&amp;#8217;t definitively prove that an asteroid is not going to destroy the world, we should play it safe and spend trillions of dollars on an asteroid defence&amp;nbsp;system&amp;#8221;.&lt;/p&gt;
&lt;p&gt;A another deliciously silly argument I&amp;#8217;ve often seen attached to this is that the &amp;#8220;only&amp;#8221; cost of such precautionary action is money. Right. Money. The thing we use to represent our available resources. The resources we use to sustain, grow and advance our civilisation. Oh, if that&amp;#8217;s the only cost, I don&amp;#8217;t know what all the fuss is about. The best part is that if you ask the person making this argument &amp;#8220;should we spend more on education/health care/social justice/foreign aid/anything except defence&amp;#8221;, they&amp;#8217;ll say &amp;#8220;yes&amp;#8221; to every one without a hint of&amp;nbsp;irony.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s lacking here is any assessment of risk and cost. Most environmentalists seem to avoid getting into any hard numbers concerning risk and cost, likely because their ideas do not come out well. That&amp;#8217;s a topic for another post,&amp;nbsp;however.&lt;/p&gt;
&lt;h2&gt;5. The Glaciers, they are&amp;nbsp;melting!!!&lt;/h2&gt;
&lt;p&gt;This is the standard response Al Gore comes out with in the rare event he gets challenged on anything he says: (paraphrasing here) &amp;#8220;Ice caps are &lt;em&gt;melting&lt;/em&gt;, polar bears are &lt;em&gt;dying&lt;/em&gt;, sea levels are &lt;em&gt;rising&lt;/em&gt;, the reality of climate change cannot be denied!&amp;#8221;. To the extent these all these claims are not exaggerations or equivocal or simply untrue, they do not say anything about attribution. The most they can tell us is what climate changes are occurring, but not&amp;nbsp;why.&lt;/p&gt;
&lt;p&gt;There is the ongoing, rather desperate, attempt to portray the changes we observe as &amp;#8220;unprecedented&amp;#8221;, as this would indeed be circumstantial evidence of an influence from human industrialisation unique in the world&amp;#8217;s history. The problem is that we have very little idea of what is &amp;#8220;precedented&amp;#8221; in terms of climate changes. Considering the number of climate phenomena we have only been observing closely for a few decades, it is hardly surprising that we see changes without&amp;nbsp;precedent.&lt;/p&gt;</summary><category term="politics"></category><category term="climate change"></category></entry><entry><title>Applying Applicative Functors inÂ Scala</title><link href="/applying-applicative-functors-in-scala.html" rel="alternate"></link><updated>2011-09-02T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2011-09-02:applying-applicative-functors-in-scala.html</id><summary type="html">&lt;p&gt;A chap named ittayd has written a nice &lt;a href="http://www.tikalk.com/incubator/blog/functional-programming-scala-rest-us"&gt;gentle tutorial on functional programming in Scala&lt;/a&gt;. My only minor complaint is that he calls the applicative functor &amp;#8220;sequential application&amp;#8221; function &lt;code&gt;apply&lt;/code&gt;. While this is a logical choice, in Scala &lt;code&gt;apply&lt;/code&gt; is used everywhere to implement plain old function application, so it could lead to confusion. I think it&amp;#8217;s better to call it &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;, as in Haskell. Read&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;I found the tutorial interesting because it talks a bit about applicative functors, and how to give them a nice syntax in Scala. The one thing that has bugged me about applicatives is that using them in Scala always felt clunkier than Haskell. Ittayd comes up with a scheme I like, but says &amp;#8220;we have one difficulty: we can no longer define apply inside Future&amp;#8221;. He uses a standard object-pimping implicit conversion to get around this, and that works fine. However, it &lt;em&gt;is&lt;/em&gt; possible to define &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; inside your thing-with-an-applicative-functor, using one of my favourite Scala features: &lt;a href="http://stackoverflow.com/questions/3427345/what-do-and-mean-in-scala-2-8-and-where-are-they-documented/3427759#3427759"&gt;generalized type constraints&lt;/a&gt;. To continue with ittayd&amp;#8217;s example using &lt;code&gt;Future&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// â¦&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;, &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;])(&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="kt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isDone&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isDone&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isDone&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The compiler will only allow &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; to be called on a &lt;code&gt;Future&lt;/code&gt; that provides an appropriate function as its&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Ittayd bootstraps things simply by lifting the function to be applied into &lt;code&gt;Future&lt;/code&gt;, but personally I prefer the Haskell style of using &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;, aka &amp;#8220;map&amp;#8221;. In Scala, &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; is unsuitable for a few reasons, so I picked &lt;code&gt;**:&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// â¦&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="o"&gt;**:[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, this is just the standard &lt;code&gt;map&lt;/code&gt; method with a different name, what&amp;#8217;s the point? Well, because the operator ends with a :, it&amp;#8217;s right associative; and because it starts with an *, it has higher precedence than &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;; so you end up&amp;nbsp;with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marry&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;curried&lt;/span&gt; &lt;span class="o"&gt;**:&lt;/span&gt; &lt;span class="n"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jane&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, if you subscribe to the slippery slope theory of gay&amp;nbsp;marriage:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gayMarry&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;curried&lt;/span&gt; &lt;span class="o"&gt;**:&lt;/span&gt; &lt;span class="n"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bob&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;george&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fido&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;aDonkey&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is reasonably close to the Haskell&amp;nbsp;idiom:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;gayMarry&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bob&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;george&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fido&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;aDonkey&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may wonder why obsess over the best way of dealing with applicative functors? After all, most of the applicative functors you see have an associated monad, so we can use Scala&amp;#8217;s nice &lt;code&gt;for&lt;/code&gt; syntax. Yes this is true for many useful applicative functors, but not all of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Just a quick aside on termonology. In casual conversation, you may hear it said that &amp;#8220;Option is a monad&amp;#8221;. But it&amp;#8217;s more accurate to say &amp;#8220;Option &lt;em&gt;has&lt;/em&gt; a monad&amp;#8221;. Because many types only have one useful monad associated with them, we tend to think that the type itself is the monad, but that&amp;#8217;s not quite right. This doesn&amp;#8217;t just apply to monads, of course, the same goes for monoids, applicative functors, etc. For example, numeric types have two useful monoids: one for addition and one for&amp;nbsp;multiplication.&lt;/p&gt;
&lt;p&gt;Now consider a Validation type from &lt;a href="http://dl.dropbox.com/u/7810909/docs/applicative-errors-scala/chunk-html/index.html"&gt;this Tony Morris tutorial&lt;/a&gt;. You can write a useful monad for this type, which implies an applicative functor as well. However, the tutorial is concerned with a &lt;em&gt;second&lt;/em&gt; useful applicative functor for Validation. This second applicative is only relevant for the case where the Validation is using a semigroup as its error type (the tutorial explains what a semigroup is), and it allows using the semigroup to accumulate a list of all the validation failures. The classic example of this is validating data entered by a user on a form with several fields. The &amp;#8220;plain&amp;#8221; applicative/monad will only record the first validation failure it finds, whereas the semigroup applicative will record all the&amp;nbsp;failures.&lt;/p&gt;
&lt;p&gt;Now, finally, to my point (I think). This applicative functor that uses semigroup does not have a corresponding monad. Which means that we can&amp;#8217;t use it with Scala&amp;#8217;s &lt;code&gt;for&lt;/code&gt; syntax. Hence the desire for a nice syntax for applicative functors. It is most definitely&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Obligatory &lt;a href="http://code.google.com/p/scalaz/"&gt;Scalaz&lt;/a&gt; reference: those guys have pretty much worked out the best way to do all this stuff in Scala. But I find I learn a lot by experimenting&amp;nbsp;myself.&lt;/p&gt;</summary><category term="scala"></category><category term="programming"></category></entry><entry><title>A Variation on Scalaâs EitherÂ Type</title><link href="/a-variation-on-scalas-either-type.html" rel="alternate"></link><updated>2011-05-03T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2011-05-03:a-variation-on-scalas-either-type.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been using Scala&amp;#8217;s &lt;code&gt;Either&lt;/code&gt; type a bit recently, and found a
couple of minor annoyances with it. So as a learning exercise I tried to
make a variation of &lt;code&gt;Either&lt;/code&gt;, and this is what I came up with. I also
wanted to experiment with syntax a little. See what you&amp;nbsp;think.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Either&lt;/code&gt; is a disjunctive type with two possible values: a &lt;em&gt;left&lt;/em&gt; and a &lt;em&gt;right&lt;/em&gt;.
It places no meaning at all on left or right, but 99% of its uses in practice
involve putting normal, expected values in right, and errors or other
&amp;#8220;exceptional&amp;#8221; values in left. This means that almost all the time you
end up getting the &lt;code&gt;RightProjection&lt;/code&gt;,&amp;nbsp;e.g.:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
    &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
    &lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whereas I&amp;#8217;ve never used &lt;code&gt;.left&lt;/code&gt; even&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;The second minor issue is that Either has some limitations with patterns
in &lt;code&gt;for&lt;/code&gt; expressions, because of how it is forced to implement the &lt;code&gt;filter&lt;/code&gt;
method. See
&lt;a href="http://stackoverflow.com/questions/5831453/why-does-this-scala-for-expression-using-tuples-fail-to-compile"&gt;this Stack Overflow question&lt;/a&gt; for the&amp;nbsp;details.&lt;/p&gt;
&lt;p&gt;So I created a type that is explicitly designed to handle the possibility
of &amp;#8220;exception&amp;#8221; conditions. Because the word &amp;#8220;exception&amp;#8221; already has a well
known meaning on the &lt;span class="caps"&gt;JVM&lt;/span&gt;, I called this type &lt;em&gt;Anomaly&lt;/em&gt; instead. Actually,
I ended up calling the type &lt;code&gt;|:&lt;/code&gt; because I thought it worked nicely
syntactically. Here&amp;#8217;s a comparison with &lt;code&gt;Either&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;, &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;e3&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_2&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;e4&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vs&amp;nbsp;&amp;#8220;Anomaly&amp;#8221;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;|:&lt;/code&gt; operator is right-associative, which helps for the occasional cases where
you have an Anomaly within an Anomaly, eg. &lt;code&gt;String |: String |: Int&lt;/code&gt; is
equivalent to &lt;code&gt;Either[String, Either[String, Int]]&lt;/code&gt;. Of course, depending
on your taste you could reverse the order of type arguments,
using an operator like &lt;code&gt;:|&lt;/code&gt;, or use a name instead of an&amp;nbsp;operator.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a cost to making the &lt;code&gt;for&lt;/code&gt; expression pattern matching work like
this, however. In addition to the &lt;code&gt;Anomaly&lt;/code&gt; and &lt;code&gt;Expected&lt;/code&gt; cases, I had
to introduce a &lt;code&gt;NoValue&lt;/code&gt; case object, which is what is returned when a
filter does not match. This is annoying, because now folding or pattern
matching must account for three cases instead of two. And unless you
have explicit filters or patterns matching particular values, the
&lt;code&gt;NoValue&lt;/code&gt; outcome won&amp;#8217;t come up, so it&amp;#8217;s a pain to have to check for it.
What I ended up doing was providing an alternate two-parameter fold method
that calls &lt;code&gt;error&lt;/code&gt; in case of a &lt;code&gt;NoValue&lt;/code&gt;. You just have to be careful
about only calling it when you know it&amp;#8217;s&amp;nbsp;safe.&lt;/p&gt;
&lt;p&gt;All-in-all I&amp;#8217;m still wondering whether this experiment is worthwhile, but
here&amp;#8217;s the code in case anyone is interested.
There are other utility methods that could be&amp;nbsp;added:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;|:&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+A&lt;/span&gt;, &lt;span class="kt"&gt;+E&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isExpected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isAnomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isNoValue&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;X&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;, &lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="k"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;|:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;X&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;withFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
  &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;withFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;fExpected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fAnomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fNoValue&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fAnomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fExpected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;NoValue&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fNoValue&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;fExpected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fAnomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fAnomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fExpected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;NoValue&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Attempt to fold NoValue case&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;, &lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="k"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="kt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;NoValue&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;NoValue&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+A&lt;/span&gt;, &lt;span class="kt"&gt;+E&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;|:&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isExpected&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Predef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Not an anomaly&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;withFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;NoValue&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;, &lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="k"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;|:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+A&lt;/span&gt;, &lt;span class="kt"&gt;+E&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;|:&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isAnomaly&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Predef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Not an expected value&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;, &lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="k"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;|:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt;, &lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;E&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="kt"&gt;|:&lt;/span&gt; &lt;span class="kt"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Anomaly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anomaly&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Expected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;NoValue&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Nothing&lt;/span&gt; &lt;span class="o"&gt;|:&lt;/span&gt; &lt;span class="nc"&gt;Nothing&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isNoValue&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;anomaly&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Predef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Not an anomaly&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Predef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No value&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;, &lt;span class="kt"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="k"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;&lt;span class="caps"&gt;AA&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;|:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category><category term="programming"></category></entry><entry><title>Ceylon: Interesting For The WrongÂ Reasons</title><link href="/ceylon-interesting-for-the-wrong-reasons.html" rel="alternate"></link><updated>2011-04-15T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2011-04-15:ceylon-interesting-for-the-wrong-reasons.html</id><summary type="html">&lt;p&gt;A couple of days ago, Gavin King announced that he is leading a team at RedHat that&amp;#8217;s creating a new &lt;span class="caps"&gt;JVM&lt;/span&gt; language called Ceylon. See &lt;a href="http://in.relation.to/19161.lace"&gt;here&lt;/a&gt; for most of what is known so far. The stated motivation, in a nutshell is that they like Java very much, but it has deficiencies that are preventing progress in key areas, and they are generally feeling &amp;#8220;frustrated&amp;#8221;. They don&amp;#8217;t have a complete compiler yet, but they&amp;#8217;re working on it, and I get the impression RedHat is pretty serious about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Gavin King&amp;#8217;s slides provide a fascinating insight into the kind of thinking that remains so dominant in the Java community. Gavin King is well known in the Java world as the inventor/leader of &lt;a href="http://www.hibernate.org/"&gt;Hibernate&lt;/a&gt; and various other JBoss projects. He certainly knows Java inside out, and his list of &amp;#8220;frustrations&amp;#8221; is astute, if incomplete. While I haven&amp;#8217;t dug into all the details so far revealed about Ceylon, but it seems likely that they&amp;#8217;ll succeed in their goal of creating &amp;#8220;a better Java&amp;#8221;. If given the choice between using Java and Ceylon, I could certainly see myself choosing Ceylon. But Ceylon is a terrible idea. The problem is that they are treating the symptoms, not the disease; and they&amp;#8217;re repeating exactly the same mistakes that resulted in them finally hitting a dead-end with&amp;nbsp;Java.&lt;/p&gt;
&lt;p&gt;Possibly the best outcome of Ceylon is that it emphatically refutes the argument that &amp;#8220;Java is all we need&amp;#8221;. Few have put more hard labour into trying to make Java feasible than Gavin King and the JBoss folks. They and a &lt;a href="http://apache.org"&gt;few&lt;/a&gt; &lt;a href="http://www.springsource.org/"&gt;others&lt;/a&gt; have spent the last decade or so producing a staggering number of bloated tools, libraries and frameworks in order to keep Java going. Don&amp;#8217;t get me wrong, there&amp;#8217;s a lot of extremely useful Java libraries out there, but there&amp;#8217;s also a huge amount of guff that exists solely to compensate for the impracticality of the Java language. Ceylon is the &amp;#8220;main-stream&amp;#8221; admitting, finally, that not all problems can be solved &lt;em&gt;the Java way&lt;/em&gt;: more frameworks, more libraries, more tools, more&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;So Mr King and friends have finally hit the wall with Java. They&amp;#8217;re a bit late to the party, but we should welcome them none the less. So why do I say Ceylon is a terrible idea? The short answer is: &lt;a href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;. The long answer is, well, longer. My biased summary of the situation is this: after years of having to build more and more layers of increasingly baroque frameworks in order to make progress, they realise that they can no longer keep up with their competitors (C#) because Java the language is an unavoidable bottleneck. They identify certain essential abstractions that are needed to solve their immediate problems, and proceed to design a new language that provides those essential abstractions, while remaining as &amp;#8220;familiar&amp;#8221; as&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;In other words, Ceylon is all about making &amp;#8220;a better Java&amp;#8221;. There is certainly support for a evolutionary approach like this. Some argue that Java itself was (in language terms) &amp;#8220;a better C++&amp;#8221;, so why not follow that successful approach now? Well, if that worked so well for Java, why are even its greatest fans now trying to replace it? I&amp;#8217;m reminded of Linus Torvalds&amp;#8217; reaction to &amp;#8220;Subversion is a better &lt;span class="caps"&gt;CVS&lt;/span&gt;&amp;#8221;. The problem with Subversion isn&amp;#8217;t that is poorly designed or built; it isn&amp;#8217;t. The problem with Subversion is that the goal itself just isn&amp;#8217;t very&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;This is how it&amp;#8217;s going to go: Ceylon will be built, they&amp;#8217;ll make a &lt;span class="caps"&gt;SDK&lt;/span&gt; library, then there will be Hibernate-Ceylon, Spring-Ceylon, WebFrameworks-Ceylon 1 through 63,854, Logging4Ceylon, Ceylon.util.logging, commons-logging-ceylon and Simple Logging Facade 4 Ceylon. All these will be an improvement over their Java equivalents. Then, in another five or so years they&amp;#8217;ll hit some new pain points and realise that some of those other &amp;#8220;academic&amp;#8221; abstractions are actually useful in the real world after all. For example, Ceylon supports higher-order functions (but, inexplicably, not lambda expressions). If we could go back in time 5 years and ask Gavin King &amp;#8220;how important do you think higher-order functions are?&amp;#8221;, what would he say? My guess is &amp;#8220;they&amp;#8217;re not essential for Real&amp;nbsp;Work&amp;trade;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;But it&amp;#8217;s still an improvement, so why not embrace it? Because we have an already have a much better option that&amp;#8217;s already doing the job in the real world: Scala. Or look at the interesting stuff going on in .&lt;span class="caps"&gt;NET&lt;/span&gt; land. Ceylon&amp;#8217;s goals look positively narrow and uninspiring by comparison. Of course, Gavin King was immediately asked &amp;#8220;why not Scala?&amp;#8221;. It is my sincere hope that this question will continue to be asked of him. His answer consists of the same misconceptions that Scala advocates have been trying to dispel since forever. Take this statement from Mr King, from an &lt;a href="http://www.infoq.com/news/2011/04/ceylon"&gt;interview in InfoQ&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One important force that helped make Java so successful was the things Java left out. But you need to be very smart here: Java&amp;#8217;s decision to leave out higher-order function support was enormously harmful. Now, obviously the Scala team have gone down a very different path here and have created a very feature-rich type system. As a general rule I would prefer to solve my problems with fewer, more general constructs, than with more, less powerful&amp;nbsp;constructs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the exact inverse of the truth. No one who has made a serious effort to understand Scala could make such a statement. &amp;#8220;Fewer, more general constructs&amp;#8221; is &lt;em&gt;exactly&lt;/em&gt; what Scala is all about! My summary of Scala&amp;#8217;s mission statement would be as&amp;nbsp;follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scala aims to maximise the potential for useful abstractions,&amp;nbsp;whilst:&lt;/li&gt;
&lt;li&gt;giving assurance that your abstractions are correct (static&amp;nbsp;typing)&lt;/li&gt;
&lt;li&gt;allowing you to do what is necessary to get the performance you&amp;nbsp;need&lt;/li&gt;
&lt;li&gt;maintaining seamless interoperability with&amp;nbsp;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scala aims to be compatible with Java, but it&amp;#8217;s about much more than just &amp;#8220;a better Java&amp;#8221;. Ironically, it seems as though Ceylon will not interoperate with Java as seamlessly as Scala does (e.g. Scala keeps null and type erasure). It&amp;#8217;ll be interesting to see how that works out. To get an idea of how serious the Scala team is about powerful but &lt;em&gt;practical&lt;/em&gt; abstractions, look at how they handle the tensions that crop up between abstraction and performance. Great examples of this are how Scala deals with the unpleasantness of arrays on the &lt;span class="caps"&gt;JVM&lt;/span&gt;, and also the &lt;code&gt;@specialized&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;Scala is by no means perfect. The trade-offs it makes will not suit everyone fully. But I cannot help but scratch my head over statements like this (Gavin King,&amp;nbsp;again):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But I guess I should mention that the number one technical problem that we simply can&amp;#8217;t solve to our satisfaction in Java - or in any other existing &lt;span class="caps"&gt;JVM&lt;/span&gt; language - is the problem of defining user interfaces and structured data using a typesafe, hierarchical&amp;nbsp;syntax.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could very well be missing something, but this would seem like a problem that is right in Scala&amp;#8217;s wheelhouse. Perhaps it may not be solved satisfactorily today, but it could done with far less effort than creating a whole new language (and new standard library, and new tool chain&amp;hellip;). It is depressing to think of what these guys could achieve working with Scala instead of pouring resources into&amp;nbsp;Ceylon.&lt;/p&gt;
&lt;p&gt;You may wonder, &amp;#8220;if you think Scala is so good, then use it and be happy, why worry about Ceylon?&amp;#8221; Well, I worry because I think Ceylon is worse than Scala, but it could win anyway. That actually seems to be the more common outcome in these situations. I would much prefer a world with Scala jobs in demand than one with Ceylon jobs in demand. So, yes, it&amp;#8217;s all about me being selfish. I would say to all Scala fans: don&amp;#8217;t be afraid to be a little selfish and evangelise for the better&amp;nbsp;outcome.&lt;/p&gt;</summary><category term="ceylon"></category><category term="flameage"></category><category term="java"></category><category term="scala"></category></entry><entry><title>Creationism and Climate ChangeÂ Denial</title><link href="/creationism-and-climate-change-denial.html" rel="alternate"></link><updated>2010-12-21T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2010-12-21:creationism-and-climate-change-denial.html</id><summary type="html">&lt;p&gt;Iâve noticed this more and more: people lumping âclimate change denialâ and âevolution denialâ (creationism) into the same category. The argument is that both of these are the result of the same religious conservative âanti-scienceâ movement. In a very narrow sense, this is true; creationists generally do not seem to believe in anthropogenic global warming (&lt;span class="caps"&gt;AGW&lt;/span&gt;), for the same bogus reasons they donât believe in evolution. But the reverse is not true: many (most I would say) &lt;span class="caps"&gt;AGW&lt;/span&gt; skeptics are not creationists. Lumping these two things together allows the environmentalists to dismiss any criticism of the established climate change narrative as the ravings of anti-scientific religious nuts. But there are some very significant scientific and economic arguments around climate change that are most definitely not in the same class as creationist arguments. Time for some&amp;nbsp;de-lumping.&lt;/p&gt;
&lt;p&gt;One major difference between climate change and evolution is how the evidence is understood and presented. It is now a familiar experience to see someone on &lt;span class="caps"&gt;TV&lt;/span&gt; telling us we need to immediately reduce emissions to avoid climatic catastrophe. In the rare event that such a person is asked to provide evidence of a human cause, the most common answer Iâve observed is along the lines of âice caps and glaciers are melting, and the scientific consensus is that human &lt;span class="caps"&gt;CO&lt;/span&gt;â emissions are to blame.â Now, when was the last time you heard someone asked for evidence supporting evolution to respond with âlife forms adapt to their environment and the scientific consensus is that Darwinian evolution is the cause.â This is not a small point. The fact that âconsensusâ is so regularly rolled out to support &lt;span class="caps"&gt;AGW&lt;/span&gt;, but is never used to support evolution shows that the levels of scientific understanding and debate are completely&amp;nbsp;different.&lt;/p&gt;
&lt;p&gt;No one talks about the âscientific consensusâ for evolution because thereâs no need to: evolution has a mountain of cold hard facts on its side, all confirmed by independent observation countless times. Climate research is very tough by comparison: our observational capabilities generally arenât good enough to falsify competing theories. Instead, we have the &lt;span class="caps"&gt;IPCC&lt;/span&gt; saying that since we canât establish the facts by direct observation, weâll establish them by consensus. You canât take the &lt;span class="caps"&gt;IPCC&lt;/span&gt; publications, repeat the experiments and confirm their results, because at the end of the day itâs just&amp;nbsp;opinion.&lt;/p&gt;
&lt;p&gt;My point here is not to show that the &lt;span class="caps"&gt;IPCC&lt;/span&gt; is wrong, but simply to show that the scientific process that it follows is fundamentally and necessarily different to that of evolutionary biology, or any other hard science for that matter. Questioning the consensus-derived âfactsâ of climate research is not the same thing as questioning the empirically verified facts of&amp;nbsp;evolution.&lt;/p&gt;
&lt;p&gt;Another difference I think is worth pointing out is how politics is so commonly mixed with climate science, in contrast to evolution science. Tell me if this scenario sounds familiar: well credentialed scientist goes on &lt;span class="caps"&gt;TV&lt;/span&gt; and says âmy research shows that climate change is likely to significantly damage coral reefsâ¦â and barely pausing for breath continues âso itâs clear we must act to cut &lt;span class="caps"&gt;CO&lt;/span&gt;â emissions.â This casual connection of minor scientific research to sweeping reorganisation of the worldâs energy production is now so common place that people donât find it remarkable. And if you accept the climate change problem but doubt the solution youâll likely still receive the âdenierâ pejorative. Evolutionary biology simply isnât political in this&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Skepticism regarding climate change is not comparable to the denial of the established facts of evolution. Climate research has a long, long way to go before it achieves the level of confidence we have in evolution. It is very wrong to think that all opposition to the climate change narrative is driven by Biblical&amp;nbsp;literalism.&lt;/p&gt;</summary><category term="evolution"></category><category term="politics"></category><category term="religion"></category><category term="climate change"></category></entry><entry><title>More Thoughts on Apple andÂ Java</title><link href="/more-thoughts-on-apple-and-java.html" rel="alternate"></link><updated>2010-10-27T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2010-10-27:more-thoughts-on-apple-and-java.html</id><summary type="html">&lt;p&gt;A few more points that occurred to me, following up on my last&amp;nbsp;post.&lt;/p&gt;
&lt;h1&gt;Whither the&amp;nbsp;Mouse?&lt;/h1&gt;
&lt;p&gt;Since its inception in 1984, the Mac user interface has obviously been
designed for desktop computers with a mouse and a keyboard. When notebook
computers came along and we wanted to be able to use them without carrying a
mouse everywhere, or without even a flat, stable surface to put the mouse on,
they had to emulate the mouse as best they could. This may now be&amp;nbsp;reversing.&lt;/p&gt;
&lt;p&gt;In the announcement of Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X Lion, there was great
emphasis placed on the use of multitouch gestures as a means of control. I
think Lion will be the first &lt;span class="caps"&gt;OS&lt;/span&gt; designed for notebooks with multitouch
trackpads, with the desktop Macs left to emulate the MacBooks as best they
can. If you consider that a sizeable majority of the hardware Apple sells
today is mobile and primarily operated via some form of multitouch instead of
a mouse, this move seems sensible. And all new desktop Macs ship with the
multitouch-capable &lt;a href="http://www.apple.com/magicmouse/"&gt;Magic Mouse&lt;/a&gt;
as standard&amp;nbsp;now.&lt;/p&gt;
&lt;h1&gt;The Costs of Supporting&amp;nbsp;Java&lt;/h1&gt;
&lt;p&gt;With regard to Java, there&amp;#8217;s been a few comments along the lines of &amp;#8220;all the
hardware Apple sells to Java developers must more than cover the cost of the
handful of engineers needed to keep maintaining Java&amp;#8221;. I think this
underestimates the costs involved. Supporting Java means, in addition to the
engineers,&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java must be accounted for in development&amp;nbsp;plans&lt;/li&gt;
&lt;li&gt;Java must be accounted for in &lt;span class="caps"&gt;QA&lt;/span&gt;&amp;nbsp;plans&lt;/li&gt;
&lt;li&gt;Customer support needs to deal with&amp;nbsp;it&lt;/li&gt;
&lt;li&gt;Security vulnerabilities need to be investigated and&amp;nbsp;fixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The true cost isn&amp;#8217;t so much the money, it&amp;#8217;s that it unavoidably diverts some
of the company&amp;#8217;s attention from things it would rather focus on. While
continuing with Java support wouldn&amp;#8217;t be hugely onerous for Apple, eliminating
distractions that aren&amp;#8217;t bringing much benefit can really help&amp;nbsp;competitiveness.&lt;/p&gt;
&lt;p&gt;Also, as the vast majority of Java work (since the switch to Intel) has
been on the &lt;span class="caps"&gt;GUI&lt;/span&gt;, I&amp;#8217;d expect the Java team knows the guts of the Mac &lt;span class="caps"&gt;GUI&lt;/span&gt; pretty
well by now. Engineering talent isn&amp;#8217;t exactly a fungible resource. There&amp;#8217;s
probably a development manager somewhere in Apple salivating at the thought of
having the Java people on her&amp;nbsp;team.&lt;/p&gt;
&lt;h1&gt;Apple and the Server&amp;nbsp;Side&lt;/h1&gt;
&lt;p&gt;Folks have pointed out that Apple is a heavy user of server-side Java in their
web services. I can think of many ways they can deal with that, and have no
idea which option they&amp;#8217;ll take. But I think we can be sure they&amp;#8217;ve got a plan
and aren&amp;#8217;t leaving it to chance. And despite everyone (including me) getting
very animated over &amp;#8220;Apple dropping Java&amp;#8221;, it&amp;#8217;s worth remembering that their
Java team isn&amp;#8217;t going to be shutting down&amp;nbsp;tomorrow.&lt;/p&gt;
&lt;p&gt;More generally, Apple&amp;#8217;s plans for the cloud are completely opaque to me right
now. We&amp;#8217;re all assuming they have big plans for cloud services: they built that
&lt;a href="http://www.tuaw.com/2010/10/05/apples-north-carolina-data-center-nears-completion/"&gt;huge new data centre&lt;/a&gt;,
and their hardware strategy seems to imply more reliance
on cloud services in the future. The iPad&amp;#8217;s greatest weakness is that so much
of its functionality, including just initialising it, requires &lt;span class="caps"&gt;USB&lt;/span&gt;
synchronisation with a &lt;span class="caps"&gt;PC&lt;/span&gt; or Mac. MobileMe syncing is great, but it only works
for a few&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;The new MacBook Air models were just announced,
including one with an 11&amp;#8221; screen, which I think is a first for Apple
notebooks. When making the announcement, Steve Jobs said something like &amp;#8220;we
think this is the future of MacBooks&amp;#8221;. With their emphasis on mobile, wireless
use and limited storage, these too are crying out for more cloud&amp;nbsp;services.&lt;/p&gt;
&lt;p&gt;And I think this could be Apple&amp;#8217;s greatest weakness. If I were Steve
Jobs, the thing that would worry me most about Android isn&amp;#8217;t its &amp;#8220;openness&amp;#8221;
(however you care to define it), or the temporary situation of shelf-space in
&lt;span class="caps"&gt;U.S.&lt;/span&gt; phone outlets, but the fact it is backed up by the world&amp;#8217;s best cloud
services. And they&amp;#8217;re only going to get better. Obstacles remain, but the
movement towards doing more and more in the cloud is inexorable. Where Google
has no rival, Apple&amp;#8217;s track record is not that great. The iTunes store is a
huge success, obviously, but it&amp;#8217;s not really all that &amp;#8220;cloudy&amp;#8221;, as you need a
Mac with enough hard drive to hold all your content. MobileMe is expensive,
and often unreliable and slow; it really only survives due to the
first class client support on Mac and iOS. The iWork service is not bad, but
lacks Google&amp;#8217;s killer feature of collaborative editing. Apple has its work cut
out for it when it comes to the&amp;nbsp;cloud.&lt;/p&gt;
&lt;h1&gt;Flash, Core Animation and&amp;nbsp;Multitouch&lt;/h1&gt;
&lt;p&gt;In my last post I claimed Flash didn&amp;#8217;t support Core Animation or Multitouch.
Well, &lt;a href="http://twitter.com/#%21/johnyanarella/status/28742755151"&gt;@johnyanarella set me right on that&lt;/a&gt;. Flash does support both of these. I haven&amp;#8217;t used that many Flash apps, so now I&amp;#8217;m wondering to what extent the multitouch support is actually used in&amp;nbsp;apps.&lt;/p&gt;</summary><category term="java"></category><category term="apple"></category><category term="speculation"></category></entry><entry><title>Java and theÂ Mac</title><link href="/java-and-the-mac.html" rel="alternate"></link><updated>2010-10-23T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2010-10-23:java-and-the-mac.html</id><summary type="html">&lt;p&gt;So Apple has quietly announced that it is &lt;a href="http://developer.apple.com/library/mac/#releasenotes/Java/JavaSnowLeopardUpdate3LeopardUpdate8RN/NewandNoteworthy/NewandNoteworthy.html%23//apple_ref/doc/uid/TP40010380-CH4-SW1"&gt;deprecating its support for Java on the Mac&lt;/a&gt;. The wording was (not uncharacteristically for situations like this) a bit vague on the details of what this means. I think two things are definite: 1) Apple will continue to support Java 6 on Snow Leopard until it reaches end of life; which I think happens when the &lt;span class="caps"&gt;OS&lt;/span&gt; &lt;em&gt;after&lt;/em&gt; Lion is publicly released. 2) Apple will not port Java 7+ to the Mac. The main unresolved question is whether Java 6 will be supported on Lion. My guess is that it will be offered as an optional download, similar to Rosetta in Snow Leopard. Apple won&amp;#8217;t make any promises though, as they will want to have the option to drop it if it&amp;#8217;s too much&amp;nbsp;effort.&lt;/p&gt;
&lt;p&gt;As a Mac user who has been working on the Java platform for many years, this is a fairly big deal for me. I think it&amp;#8217;s an interesting event that provides a chance to examine both Java&amp;#8217;s position and Apple&amp;#8217;s plans for the Mac. People in the Mac Java community are speculating about the deeper meaning behind this move, especially when combined with Apple effectively banning Java platform applications from the new Mac App Store. So time for me to add my speculation to the&amp;nbsp;noise.&lt;/p&gt;
&lt;h1&gt;Is Apple trying to force the use of their platform and&amp;nbsp;tools?&lt;/h1&gt;
&lt;p&gt;No. True, Apple has made it crystal clear on numerous occasions (the Mac App store requirements are just the latest case) that they want developers targeting their &lt;span class="caps"&gt;OS&lt;/span&gt; platforms to use their development platform (Objective-C, Cocoa, Xcode). But I don&amp;#8217;t think they are deprecating Java in an attempt to force the issue. After all, Lion will come with Perl, Python and Ruby all&amp;nbsp;pre-installed.&lt;/p&gt;
&lt;h1&gt;Does Apple want to kill cross-platform desktop&amp;nbsp;apps?&lt;/h1&gt;
&lt;p&gt;No. I think it&amp;#8217;s true that, strategically speaking, Apple has no interest at all in cross-platform apps (outside of the browser). But along with announcing the deprecation, the latest Apple Java release also includes brand-new support for installing multiple versions of the Java platform, explicitly mentioning support for third-party versions. It&amp;#8217;s clear that Apple has no problem at all with Java running on Macs. I think they want Oracle to take it over, but I doubt they bothered to make any sort of deal with Oracle before making this move. &lt;strong&gt;Update:&lt;/strong&gt; as I was drafting this, news came through that Steve Jobs has &lt;a href="http://www.macrumors.com/2010/10/22/steve-jobs-comments-on-apples-java-discontinuation/"&gt;replied to a question about this&lt;/a&gt;, which basically confirms that he thinks Oracle should be responsible for Java on the&amp;nbsp;Mac.&lt;/p&gt;
&lt;h1&gt;Then why did Apple do&amp;nbsp;this?&lt;/h1&gt;
&lt;p&gt;The reason isn&amp;#8217;t that complicated: Apple no longer needs Java. If you make a list of what Steve Jobs sees as the critical objectives for Apple, it becomes immediately obvious that maintaining a Mac port of Java is not helping to advance any of them. Of course, neither does maintaining, say, Apple&amp;#8217;s port of Python. But Python takes very little effort to port and maintain. The Java port requires a team of engineers permanently dedicated to it. Also, the huge success of iOS has given Apple the confidence that their approach to working with third-party developers is working out great for everyone. The prospect of Java developers and applications abandoning the Mac is no longer remotely scary for them. Apple have decided they&amp;#8217;d rather pay the costs of dropping Java than keep maintaining&amp;nbsp;it.&lt;/p&gt;
&lt;h1&gt;What are Apple&amp;#8217;s critical&amp;nbsp;objectives?&lt;/h1&gt;
&lt;p&gt;The main theme of the &amp;#8220;Back to the Mac&amp;#8221; event on October 20 was the idea of moving iPad software and hardware features into the Mac, in a way that made sense for the Mac. My theory is that Apple has now oriented its entire strategy around the iPad. I think Steve Jobs probably regards the iPad has the best thing Apple has ever made. This is because the iPad provides the &amp;#8220;purest&amp;#8221; user experience: you hold it in your hands, rotate it, move it, directly manipulate the information you&amp;#8217;re working with via touch, and it dedicates itself to the task at hand. Of course, the iPhone has these characteristics too, but if will forever be limited by the (obviously worthwhile) trade-off of fitting in your pocket. The larger screen size of the iPad allows the touch interface to reach its full&amp;nbsp;potential.&lt;/p&gt;
&lt;p&gt;Slight diversion: in the recent financial call, Jobs said that 7&amp;#8221; was a lousy form-factor for a tablet. You had better believe that he meant it. I will bet that Apple will never release an iPad with a different form factor. Going smaller puts to many constraints on the options for touch &lt;span class="caps"&gt;UI&lt;/span&gt;, so you end up with a bulky iPhone. Going larger would be nice, but it rapidly becomes unwieldy (the fact the iPad can be easily held and moved around is a critical part of the &amp;#8220;experience&amp;#8221;). The dimensions were chosen to balance the needs of video with those of e-books. Believe me, Apple chose the form-factor it did &lt;em&gt;very&lt;/em&gt;&amp;nbsp;carefully.&lt;/p&gt;
&lt;p&gt;And yes, something else Jobs likes about the iPad is that Apple has more control over it. While many ascribe this to cynical motives, I believe Jobs honestly sees this as being good for the customer, and part of the reason for the success of iOS devices. Whether this view is correct will, in the end, be decided in the&amp;nbsp;marketplace.&lt;/p&gt;
&lt;h1&gt;What is the future for the&amp;nbsp;Mac?&lt;/h1&gt;
&lt;p&gt;So Apple sees the iPad as the future. But while it might be a &amp;#8220;pure&amp;#8221; experience, there&amp;#8217;s obviously a large number of important things that the iPad simply cannot do&lt;sup&gt;1&lt;/sup&gt;. So Macs aren&amp;#8217;t going anywhere, but Jobs wants to make them more iPad-like. In the Mac event, Jobs called out what this meant: curated App Store, full screen apps, app &amp;#8220;Launchpad&amp;#8221;, autosave/resume. What is equally interesting is what this implies they are leaving behind. During Craig Federighi&amp;#8217;s demo of Lion on the 20th, he showed the use of swipe to switch between a) full screen apps b) dashboard c) &amp;#8220;the desktop&amp;#8221;. Perhaps I&amp;#8217;m reading too much into this, but what today constitutes &amp;#8220;the Mac Desktop experience&amp;#8221; seems, in Lion, to be just another full-screen app you can switch to. A Rosetta-like box to run &amp;#8220;the legacy stuff&amp;#8221;. I think Lion could be Apple&amp;#8217;s first step in really redesigning the Mac from first&amp;nbsp;principles.&lt;/p&gt;
&lt;p&gt;This iPad-like approach also reinforces other trends already underway. The traditional document-centric Mac app is basically dead. Most apps will be one-window, &amp;#8220;content-centric&amp;#8221;, and abstract the filesystem completely. And they&amp;#8217;ll be made with Apple&amp;#8217;s tools. In other words, iPhoto &amp;#8216;11 is the model. It&amp;#8217;s going to be fascinating to see how far Apple can take this. There have been people saying, literally for decades, that the fundamental desktop concept of movable, resizable, overlapping windows was the worst idea in the history of user interfaces. Will they be proven right? I have no idea. The best part is, as others have pointed out, Windows cannot easily copy what Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X is doing. Greater distinction between the keyboard/pointer &lt;span class="caps"&gt;OS&lt;/span&gt; platforms will be a great thing, in my&amp;nbsp;opinion.&lt;/p&gt;
&lt;h1&gt;Where does Java fit in all&amp;nbsp;this?&lt;/h1&gt;
&lt;p&gt;It doesn&amp;#8217;t. Regardless of whether you think Apple&amp;#8217;s plans for the Mac are great or terrible, it&amp;#8217;s clear that heavy-weight &amp;#8220;cross-platform platforms&amp;#8221; like Java and Flash, which are controlled by others, could hardly be more useless to Apple. They don&amp;#8217;t interfere with Apple&amp;#8217;s plans, but they don&amp;#8217;t help them either. Java and Flash apps don&amp;#8217;t use compelling &lt;span class="caps"&gt;OS&lt;/span&gt; X technologies like Core Animation. They&amp;#8217;re completely clueless when it comes to multitouch. Apple only cares about one &amp;#8220;cross-platform platform&amp;#8221;: the light-weight and mobile-friendly &lt;span class="caps"&gt;HTML5&lt;/span&gt;, which they can also&amp;nbsp;influence.&lt;/p&gt;
&lt;h1&gt;Will Oracle Provide Java on&amp;nbsp;Mac?&lt;/h1&gt;
&lt;p&gt;I&amp;#8217;m not sure, but I think yes. The answer to this question will also answer many questions about what Oracle really has planned for Java and JavaFX. In my opinion, JavaFX has already lost the cross-platform war to &lt;span class="caps"&gt;HTML5&lt;/span&gt; (I like JavaFX a lot, and would love Oracle to prove me wrong here). Oracle claims to be committed to developing and promoting JavaFX, so it apparently believes it can turn things around. But there&amp;#8217;s one thing I&amp;#8217;m certain about: JavaFX cannot succeed as a credible platform without first-class support on the Mac. If Oracle is actually serious about JavaFX (which &lt;em&gt;is&lt;/em&gt; client-side Java now) then it needs to very soon announce that it will be adding Mac as a fully supported platform, by Java 8 at the latest. Bringing Mac support online in a Java 7 update would be better. If Oracle lets Java on the Mac rot, then the death of client-side Java will be certain and&amp;nbsp;final.&lt;/p&gt;
&lt;h1&gt;Where did it all go wrong for&amp;nbsp;Java?&lt;/h1&gt;
&lt;p&gt;A few people have pointed out that just 10 short years ago Steve Jobs was proudly proclaiming that the Mac would be the premier platform for Java, and now after years of disinterest Apple is finally giving up on Java altogether. How times have changed. In 2000, Apple desperately needed apps on the Mac - any apps, and of course developers. Now, it&amp;#8217;s Sun/Oracle that really needs Java on the Mac, and Apple can afford to be&amp;nbsp;indifferent.&lt;/p&gt;
&lt;p&gt;Even if Oracle produces a brilliant implementation of JavaFX for the Mac, things do not look great for Java on the client. I won&amp;#8217;t make this post even longer by discussing the reasons for client Java&amp;#8217;s failure, but it&amp;#8217;s not because Apple didn&amp;#8217;t give Java a fair chance. Speaking as someone who really believed in and supported the &amp;#8220;write once, run anywhere&amp;#8221; ideal of Java, the fact has to be faced: the dream is well and truly finished. Where Java has failed, &lt;span class="caps"&gt;HTML5&lt;/span&gt; has succeeded, primarily by keeping its goals modest and being ruthlessly&amp;nbsp;pragmatic.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; But I think that we haven&amp;#8217;t even scratched the surface of what the iPad is capable of. Many of its limitations are &amp;#8220;a simple matter of software&amp;#8221;. I think iOS 4.2 is going to give a big boost to the iPad&amp;#8217;s utility, as will iOS 5 and beyond. Having said that, there&amp;#8217;ll always be some jobs that just need a mouse pointer and a&amp;nbsp;keyboard.&lt;/p&gt;</summary><category term="java"></category><category term="apple"></category><category term="speculation"></category></entry><entry><title>Scalaâs MissingÂ Monad</title><link href="/scalas-missing-monad.html" rel="alternate"></link><updated>2010-09-30T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2010-09-30:scalas-missing-monad.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been writing more and more pure functional code in both Scala and Java
recently. An issue I found myself running into quite often is this: say you
have a function that sometimes returns no results (e.g. looking up a key in a
map). A common way to deal with that in Scala is to return an &lt;code&gt;Option&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple enough. But then a typical use of such a function is to map it over all members of a&amp;nbsp;collection:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What I find I often want to do in a situation like this is to only bother with
the results if all the applications of &lt;code&gt;foo&lt;/code&gt; returned a result. In
other words, I want to turn the &lt;code&gt;strings&lt;/code&gt; list above into an
&lt;code&gt;Option[List[String]]&lt;/code&gt;, which is &lt;code&gt;Some(List(foo(1).get,
foo(2).get, foo(3).get))&lt;/code&gt; if all those applications of &lt;code&gt;foo&lt;/code&gt;
give values, and &lt;code&gt;None&lt;/code&gt; otherwise. I couldn&amp;#8217;t see any method in the
Scala standard library that does what I&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;As a bit of a functional programming n00b, one approach I&amp;#8217;ve found to be
useful is to work out the Haskell type signature of the function I want, feed
that into &lt;a href="http://haskell.org/hoogle/"&gt;Hoogle&lt;/a&gt; and see what I get, if anything.
In this case, the Haskell type&amp;nbsp;is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The top Hoogle result for that is the sequence&amp;nbsp;function:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;sequence&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And look, the &lt;code&gt;sequence&lt;/code&gt; function works on any monad, not just
&lt;code&gt;Maybe&lt;/code&gt;/&lt;code&gt;Option&lt;/code&gt;. For example, if my &lt;code&gt;foo&lt;/code&gt;
function had been returning &lt;code&gt;Either[SomeErrorType, String]&lt;/code&gt;, then
the sequence function would give the first error in the list if there was an
error, or the list of results if there was no error. So this is a useful
function, but as I said, I can&amp;#8217;t find it in the standard Scala&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;When I thought about how to implement sequence in Scala, I immediately ran
into trouble. It is often said that &amp;#8220;Scala has monads&amp;#8221;, and we know that the
&lt;code&gt;flatMap&lt;/code&gt; method is doing a monadic bind. But this support isn&amp;#8217;t
much more than a convention for method names and type signatures, combined
with nice syntax in the form of &lt;code&gt;for&lt;/code&gt; expressions. There is no
monad type declared anywhere in the standard library. Without a monad type,
the sequence function would have to be re-implemented over and over:
&lt;code&gt;Option.sequence&lt;/code&gt;, &lt;code&gt;Either.sequence&lt;/code&gt;, &lt;code&gt;List.sequence&lt;/code&gt;,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;The good news is that Scala&amp;#8217;s type system &lt;em&gt;can&lt;/em&gt; express the monad type.
And the better news is that some really smart people have already done all the
work for us in a library called
&lt;a href="" title="http://code.google.com/p/scalaz/"&gt;Scalaz&lt;/a&gt;.
So I had a look, and lo and behold there is the
&lt;a href="http://scalaz.googlecode.com/svn/continuous/latest/browse.sxr/scalaz/MA.scala.html#27505"&gt;sequence&amp;nbsp;function&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="kt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
  &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traverse&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Applicative&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;N&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That may look nothing like the Haskell function, but that is mostly a result
of how typeclasses are expressed in Scala. Trust me, this is the same
function. Also, this Scalaz function is more general than the Haskell function
above. It turns out that sequence works for any &amp;#8220;traversable&amp;#8221; thing (not just
lists) containing anything that is an applicative functor (not just monads).
Haskell also has the equivalent fully generalised sequence function in the
&lt;code&gt;Data.Traversable&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;So what did I learn from this exercise? First that the lack of explicit types
for monad, functor and friends in Scala&amp;#8217;s standard library is a greater
problem than I&amp;#8217;d expected. Second, if you&amp;#8217;re writing pure functional Scala
code, you should be using Scalaz. Since all Scala programmers should be
writing pure functional code, it follows that all Scala programmers should be
using&amp;nbsp;Scalaz!&lt;/p&gt;</summary><category term="programming"></category><category term="scala"></category><category term="haskell"></category></entry><entry><title>Cocoa vsÂ Haskell</title><link href="/cocoa-vs-haskell.html" rel="alternate"></link><updated>2010-01-08T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2010-01-08:cocoa-vs-haskell.html</id><summary type="html">&lt;p&gt;So here&amp;#8217;s the deal - if you want to write a Mac &lt;span class="caps"&gt;GUI&lt;/span&gt; app, you want to use the Cocoa framework. As a practical system for writing desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; apps, the Cocoa stack simply has no equal anywhere. Part of what makes Cocoa so great is the Objective-C language, which adds a very flexible and dynamic &lt;span class="caps"&gt;OOP&lt;/span&gt; system on top of standard&amp;nbsp;C.&lt;/p&gt;
&lt;p&gt;Objective-C turned out to be a great match for creating desktop GUIs. It&amp;#8217;s obviously a general-purpose language, but for general programming it would be no where near my first choice. My first choice right now would be Haskell, even though I&amp;#8217;m still a beginner and I pretty much suck at it. But I get why Haskell is so good (and so much&amp;nbsp;fun).&lt;/p&gt;
&lt;p&gt;So if I want to write a Mac &lt;span class="caps"&gt;GUI&lt;/span&gt; app, can I use Haskell? I&amp;#8217;ve had a play with &lt;a href="http://hoc.sourceforge.net/"&gt;&lt;span class="caps"&gt;HOC&lt;/span&gt;&lt;/a&gt; which is a very neat bit of software that bridges Objective-C to Haskell. You can call Haskell from Objective-C and implement Objective-C classes in Haskell. There are some challenges trying to use &lt;span class="caps"&gt;HOC&lt;/span&gt; - it&amp;#8217;s not exactly straightforward to get it up and running and integrated into your XCode project; and it&amp;#8217;s under active, but slow, development and doesn&amp;#8217;t have a stable release. But at a more fundamental level I&amp;#8217;ve come to the conclusion that, while it&amp;#8217;s very cool, &lt;span class="caps"&gt;HOC&lt;/span&gt; probably isn&amp;#8217;t worth&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;If you can get &lt;span class="caps"&gt;HOC&lt;/span&gt; working, you&amp;#8217;ll have a full-blown bridge that lets you use Cocoa APIs from Haskell. But is that actually worthwhile? The things that Haskell excels at are basically useless when using Cocoa, which is completely based around stateful objects being mutated by events and messages. While you could have all your code - including the Cocoa &lt;span class="caps"&gt;GUI&lt;/span&gt; stuff - in Haskell, the &lt;span class="caps"&gt;GUI&lt;/span&gt; code will all be imperative using the &lt;span class="caps"&gt;IO&lt;/span&gt; monad. All the effort just gets you Objective-C with nicer&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;So for Mac apps, I think sticking with Objective-C for the &lt;span class="caps"&gt;GUI&lt;/span&gt; code is the best choice. As a language, it sucks compared to Haskell, but it just works very well with the Cocoa APIs. But what about using Haskell to implement the Model and do other computational heavy-lifting under the hood? This turns out to be much simpler than a full Objective-C bridge. &lt;a href="http://www.haskell.org/ghc/"&gt;&lt;span class="caps"&gt;GHC&lt;/span&gt;&lt;/a&gt; of course offers a standardised foreign function interface to C out of the box, and Objective-C is a superset of C. So you can call Haskell from Objective-C code just as you would from plain C, and it works quite&amp;nbsp;naturally.&lt;/p&gt;
&lt;p&gt;But it&amp;#8217;s a bit trickier to build a complete Cocoa application that does this. There is a &lt;a href="http://www.haskell.org/haskellwiki/Using_Haskell_in_an_Xcode_Cocoa_project"&gt;HaskellWiki page&lt;/a&gt; that describes one approach to getting a complete XCode project set up. I tried it out and it works, although things don&amp;#8217;t integrate very well. You have to compile the Haskell code using ghc outside of the XCode build process, and you have to manually track down all the libWhatever.a files that your Haskell code needs to link against. I&amp;#8217;ve made a &lt;a href="http://github.com/quelgar/HaskellCocoaDemo"&gt;simple demonstration project for XCode 3.2&lt;/a&gt; that works for me on &lt;span class="caps"&gt;OS&lt;/span&gt; 10.6. This is basically the classic Currency Converter app from Apple&amp;#8217;s Cocoa tutorial, but it does the currency calculation in Haskell. Here&amp;#8217;s the rough list of steps I performed, starting from the standard XCode template for a Cocoa&amp;nbsp;Application:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the project build settings:&lt;ol&gt;
&lt;li&gt;Set the architecture to just &amp;#8220;i386&amp;#8221;. &lt;span class="caps"&gt;GHC&lt;/span&gt; is today only built for 32-bit Intel on&amp;nbsp;Mac&lt;/li&gt;
&lt;li&gt;Add &amp;#8220;-liconv&amp;#8221; to &amp;#8220;Other Linker Flags&amp;#8221;. &lt;span class="caps"&gt;GHC&lt;/span&gt; libs need&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;Add your &lt;span class="caps"&gt;GHC&lt;/span&gt; include directory to &amp;#8220;Header Search Paths&amp;#8221;. For &lt;span class="caps"&gt;GHC&lt;/span&gt; 6.12.1 on my system, this was&amp;nbsp;&amp;#8221;/Library/Frameworks/&lt;span class="caps"&gt;GHC&lt;/span&gt;.framework/Versions/Current/usr/lib/ghc-6.12.1/include/&amp;#8221;.&lt;/li&gt;
&lt;li&gt;Add &amp;#8220;/Library/Frameworks/&lt;span class="caps"&gt;GHC&lt;/span&gt;.framework/Versions/Current/&amp;#8221; to the &amp;#8220;Library Search Paths&amp;#8221; and mark it recursive. Not sure if this is actually necessary since we end up adding all the libraries to the project manually&amp;nbsp;anyway.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Haskell function that will be called from C is in &amp;#8220;HaskellConvert.hs&amp;#8221;, which uses the typical &lt;span class="caps"&gt;FFI&lt;/span&gt; stuff. You compile this with &lt;span class="caps"&gt;GHC&lt;/span&gt; like so: &amp;#8220;ghc -c HaskellConvert.hs&amp;#8221;. This outputs various files, of which the following have to be added to your XCode project:&lt;ul&gt;
&lt;li&gt;HaskellConvert.o&lt;/li&gt;
&lt;li&gt;HaskellConvert_stub.o&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You now have to add all the lib*.a files from &lt;span class="caps"&gt;GHC&lt;/span&gt; that your Haskell code needs to link successfully. The wiki page I linked to above describes one way of doing this. It&amp;#8217;s not pretty, but it works. Once you know you need a particular .a file, just drag it from the finder to the project, and accept all the defaults in the add file dialog. It will be added to the link stage&amp;nbsp;automatically.&lt;/li&gt;
&lt;li&gt;Modify main.m to perform the Haskell runtime setup and&amp;nbsp;teardown.&lt;/li&gt;
&lt;li&gt;In this demo, Haskell is called from Converter.m, so this file needs &lt;code&gt;#import "HaskellConvert_stub"&lt;/code&gt;, and then just make the call to&amp;nbsp;Haskell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Probably the biggest downside of this plain C approach vs &lt;span class="caps"&gt;HOC&lt;/span&gt; is that you can&amp;#8217;t pass Objective-C objects to Haskell (well, you can, but they are not easy to use from Haskell, to say the least). So you have to convert whatever Objective-C data structures you&amp;#8217;re using in the &lt;span class="caps"&gt;GUI&lt;/span&gt; to plain C types for interfacing with your Haskell APIs. Haskell wrappers for the &lt;span class="caps"&gt;OS&lt;/span&gt; X C APIs for CoreFoundation and the Objective-C runtime might make using Objective-C objects from Haskell feasible without a full language bridge, but I&amp;#8217;m not sure about&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;GHC&lt;/span&gt; installer for Mac installs the bulk of &lt;span class="caps"&gt;GHC&lt;/span&gt; under &amp;#8220;/Library/Frameworks/&lt;span class="caps"&gt;GHC&lt;/span&gt;.framework&amp;#8221;, but I don&amp;#8217;t think it actually works as a Mac framework. I could be doing something wrong, but adding it to XCode as a framework didn&amp;#8217;t work (XCode just said it wasn&amp;#8217;t found when I tried to build, from memory). It would be great if &lt;span class="caps"&gt;GHC&lt;/span&gt; could be made a fully-functional Mac framework, as we would no longer need to manually set include and lib search paths, or explicitly add every Haskell .a file to the project. But to make this useful, I think we&amp;#8217;d need some automated way of building any Cabal package as a framework. I&amp;#8217;m not sure if that&amp;#8217;s&amp;nbsp;feasible.&lt;/p&gt;</summary><category term="programming"></category><category term="cocoa"></category><category term="haskell"></category></entry><entry><title>Some Simple Scala NullÂ Tricks</title><link href="/some-simple-scala-null-tricks.html" rel="alternate"></link><updated>2009-12-16T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2009-12-16:some-simple-scala-null-tricks.html</id><summary type="html">&lt;p&gt;Scala code often needs to deal with null references, unfortunately. Such is
the price of Java interoperability. One of my favourite utility methods&amp;nbsp;is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="o"&gt;?[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyRef&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// e.g.&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;?(&lt;/span&gt;&lt;span class="n"&gt;javaCallThatMayReturnNull&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;getOrElse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Scala 2.8 offers this using &lt;code&gt;Option(ref)&lt;/code&gt; instead of
&lt;code&gt;?(ref)&lt;/code&gt;. However, I can&amp;#8217;t figure out why the Scala 2.8 method
accepts non-reference values as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Another simple thing that may come in handy is an extractor for non-null&amp;nbsp;values:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;NotNull&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;unapply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyRef&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What&amp;#8217;s the advantage of using an extractor? Say you have a collection of
references, some of which may be null, and you want to ignore the null&amp;nbsp;references:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// prints &amp;quot;List(a, b, c)&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category><category term="scala"></category></entry><entry><title>The FSF Doesnât Care if TheyâreÂ Lonely</title><link href="/the-fsf-doesnt-care-if-theyre-lonely.html" rel="alternate"></link><updated>2009-07-06T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2009-07-06:the-fsf-doesnt-care-if-theyre-lonely.html</id><summary type="html">&lt;p&gt;Daniel Jalkut, a leading light of the Mac developer community recently &lt;a href="http://www.red-sweater.com/blog/825/getting-pretty-lonely"&gt;blogged about&lt;/a&gt; the &lt;a href="http://www.gnu.org/licenses/licenses.html#GPL"&gt;&lt;span class="caps"&gt;GPL&lt;/span&gt;&lt;/a&gt; and some of consequences of it for collaborative software development. I agree with what he says, and I dislike how the &lt;span class="caps"&gt;GPL&lt;/span&gt; limits collaboration in a number of ways. But I thought it might be useful to go over the background and objectives of the&amp;nbsp;&lt;span class="caps"&gt;GPL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s an important thing to remember when talking about the &lt;span class="caps"&gt;GPL&lt;/span&gt;: the impact, good or bad, on the practicalities of software development have nothing to do with its objectives. The authors of the &lt;span class="caps"&gt;GPL&lt;/span&gt;, the &lt;a href="http://www.fsf.org/"&gt;Free Software Foundation&lt;/a&gt; just aren&amp;#8217;t concerned by the kinds of issues that Daniel raises. The fundamental principle of the &lt;span class="caps"&gt;FSF&lt;/span&gt; is that anyone should have complete freedom to study, modify and share all computer software. The end-game of the &lt;span class="caps"&gt;FSF&lt;/span&gt; is that all restrictions that apply to software, such as copyrights and patents, be abolished altogether (in so far as they currently apply to software). In other words, they want any software written by anyone to have no legal protection from examination, modification and redistribution by anyone else. The &lt;span class="caps"&gt;FSF&lt;/span&gt; really wants all software to be in the public domain, without the option of copyright&amp;nbsp;protection.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;GPL&lt;/span&gt; is their attempt to bring this about given the reality that copyright of software exists today and shows no signs of going away. The &lt;span class="caps"&gt;GPL&lt;/span&gt; is designed to use the copyright system against itself; the &lt;span class="caps"&gt;FSF&lt;/span&gt; calls this &amp;#8220;copyleft&amp;#8221;. In typical commercial software, the copyright is used to prevent the licensee (user) of the software from doing things with it that the author doesn&amp;#8217;t like (such as modification or redistribution). The &lt;span class="caps"&gt;GPL&lt;/span&gt; instead prevents the licensee from adding any new restrictions. The end result of putting software under the &lt;span class="caps"&gt;GPL&lt;/span&gt; is basically the same as if copyright protection for that software didn&amp;#8217;t exist at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Now, you can make many arguments pointing out the practical downsides of removing copyright restrictions on software (whether by abolishing software copyright, or via the &lt;span class="caps"&gt;GPL&lt;/span&gt;). Daniel&amp;#8217;s post is a good example of this. But to the &lt;span class="caps"&gt;FSF&lt;/span&gt;, these considerations are secondary to the principle that &lt;em&gt;any&lt;/em&gt; restrictions to what users can do with their software is morally Wrong. You can see an example of this in the &lt;a href="http://www.gnu.org/gnu/manifesto.html"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Manifesto&lt;/a&gt; where they acknowledge that adopting their policies could result in programmers earning less. Their view seems to be that doing the &amp;#8220;right thing&amp;#8221; can have effects that aren&amp;#8217;t necessarily desirable, but we just have to live with as best we can. Perhaps a good analogy is free speech, which necessarily increases the risk of children accessing pornographic or violent&amp;nbsp;material.&lt;/p&gt;
&lt;p&gt;I try to take a pragmatic &amp;#8220;what best serves the common good?&amp;#8221; approach to matters, which leads me to agree with the &lt;span class="caps"&gt;FSF&lt;/span&gt; with regard to software patents, but disagree with them on copyright. I think patents, when applied to software, are all harm and no benefits. For copyright, I can see greater upside than downside to the current system. It&amp;#8217;s true that without software copyrights we would all have greater freedom regarding how we can use our computers, but it&amp;#8217;s also likely that our computers would be of much less practical use to us. Do professional photographers and artists prefer &lt;span class="caps"&gt;GIMP&lt;/span&gt; or&amp;nbsp;Photoshop?&lt;/p&gt;
&lt;p&gt;Just to be clear, arguing over the implications of the &lt;span class="caps"&gt;GPL&lt;/span&gt; on software development practice is a very useful thing to do. Many people who don&amp;#8217;t care about the political position of the &lt;span class="caps"&gt;FSF&lt;/span&gt; still chose to use the &lt;span class="caps"&gt;GPL&lt;/span&gt; simply because it happens to suit their needs, and there&amp;#8217;s nothing wrong with that. But having a clear understanding of the costs and benefits is&amp;nbsp;essential.&lt;/p&gt;</summary><category term="programming"></category><category term="rant"></category><category term="open source"></category></entry><entry><title>Project Euler ProblemÂ 8</title><link href="/project-euler-problem-8.html" rel="alternate"></link><updated>2009-06-01T23:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2009-06-01:project-euler-problem-8.html</id><summary type="html">&lt;p&gt;I guess I should warn that these Project Euler posts have &lt;strong&gt;spoilers&lt;/strong&gt;, in case you want to try the problems yourself âº. My Scala solution to &lt;a href="http://projecteuler.net/problem=8"&gt;problem 8&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;73167176531330624919225119674426574742355349194934&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;96983520312774506326239578318016984801869478851843&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;85861560789112949495459501737958331952853208805511&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;12540698747158523863050715693290963295227443043557&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;66896648950445244523161731856403098711121722383113&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;62229893423380308135336276614282806444486645238749&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;30358907296290491560440772390713810515859307960866&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;70172427121883998797908792274921901699720888093776&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;65727333001053367881220235421809751254540594752243&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;52584907711670556013604839586446706324415722155397&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;53697817977846174064955149290862569321978468622482&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;83972241375657056057490261407972968652414535100474&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;82166370484403199890008895243450658541227588666881&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;16427171479924442928230863465674813919123162824586&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;17866458359124566529476545682848912883142607690042&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;24219022671055626321111109370544217506941658960408&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;07198403850962455444362981230987879927244284909188&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;84580156166097919133875499200524063689912560717606&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;05886116467109405077541002256983155200055935729725&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;71636269561882670428252483600823257530420752963450&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asDigit&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toArray&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldLeft&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cons&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For convenience, this specifies the input as a string, then uses &lt;code&gt;RichChar.asDigit&lt;/code&gt; to create a corresponding array of integers. The &lt;code&gt;multiply&lt;/code&gt; function uses left fold to multiply together sequences of five digits. The &lt;code&gt;multiples&lt;/code&gt; value is a stream (lazy list) of the multiples of all groups of five consecutive digits from the input. And finally, the &lt;code&gt;Iterable&lt;/code&gt; object provides a convenient method to find the maximum value in any &lt;code&gt;Iterable&lt;/code&gt; containing &lt;code&gt;Orderable&lt;/code&gt; things.&lt;/p&gt;</summary><category term="scala"></category><category term="programming"></category><category term="project euler"></category></entry><entry><title>Project Euler inÂ Scala</title><link href="/project-euler-in-scala.html" rel="alternate"></link><updated>2009-06-01T17:19:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2009-06-01:project-euler-in-scala.html</id><summary type="html">&lt;p&gt;&lt;a href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt; is a bunch of mathematical/programming problems. I&amp;#8217;ve been trying to improve my &lt;a href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt; skills by using it on some of the Euler problems. I&amp;#8217;m trying to use functional programming styles as much as possible. My solutions definitely haven&amp;#8217;t been very optimized, but I am learning, which is the&amp;nbsp;aim.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://projecteuler.net/problem=1"&gt;Euler Problem&amp;nbsp;1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.  Find the sum of all the multiples of 3 or 5 below&amp;nbsp;1000.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My&amp;nbsp;solution:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;/:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;3 until 1000&lt;/code&gt; creates a &amp;#8220;range&amp;#8221;, which is a lazy sequence of numbers from 3 to 999 inclusive. Because it&amp;#8217;s lazy, you don&amp;#8217;t get 997 integers sitting around in memory, you only get those integers which pass the filter. The filter itself shows the Scala syntax for a &amp;#8220;lambda expression&amp;#8221; (anonymous function). The full syntax is &lt;code&gt;(arg1, arg2, ..) =&amp;gt; function body&lt;/code&gt;, but when you only have one argument (a single Int, in this case) you can leave out the&amp;nbsp;brackets.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sum&lt;/code&gt; function is the operator syntax for a left fold over &lt;code&gt;nums&lt;/code&gt;. The &lt;code&gt;_+_&lt;/code&gt; is an even more terse form of a lambda expression that you can use for really simple expressions. The first underscore is replaced by the first argument to the function, and the second is replaced by the second&amp;nbsp;argument.&lt;/p&gt;</summary><category term="scala"></category><category term="programming"></category><category term="project euler"></category></entry><entry><title>Logging vs StringÂ Construction</title><link href="/logging-vs-string-construction.html" rel="alternate"></link><updated>2006-10-17T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2006-10-17:logging-vs-string-construction.html</id><summary type="html">&lt;p&gt;A classic logging problem in Java is&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;finest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expensiveStringConstruction&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem with this is that even when the logger&amp;#8217;s level is above &lt;span class="caps"&gt;FINEST&lt;/span&gt; and the message is not logged, the message string must still be constructed. In cases where constructing the string involves a lot of work, your code can be slowed down significantly even when logging is off. The standard solution is like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoggable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;finest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expensiveStringConstruction&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By adding the &lt;code&gt;if&lt;/code&gt; statement around the logging, the expensive string construction is only done if the message is actually going to be used. The problem with this is that if you have a lot of logging statements, your code soon ends up littered with these &lt;code&gt;if&lt;/code&gt;s that just obscure what is really happening. Not to mention that you have to type it all&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;This problem could have been tackled in a different way. It was a mistake for the logging methods to take &lt;code&gt;String&lt;/code&gt; objects as parameters. This mandates that the messages &lt;em&gt;must&lt;/em&gt; be constructed before passing them to the logger. A better approach is to delay creating the message string until the last possible moment, when we know it will be needed. One option would be to have an interface called, say, &lt;code&gt;LogMessageFactory&lt;/code&gt; with a method &lt;code&gt;String createLogMessage()&lt;/code&gt; and have the log methods accept the interface instead of &lt;code&gt;String&lt;/code&gt;. But a new interface isn&amp;#8217;t necessarily needed, as good old &lt;code&gt;Object&lt;/code&gt; already has a &lt;code&gt;toString&lt;/code&gt; method. If loggers took &lt;code&gt;Object&lt;/code&gt;&amp;#8216;s instead of &lt;code&gt;String&lt;/code&gt;&amp;#8216;s, then they could just call &lt;code&gt;toString&lt;/code&gt; when logging actually takes&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Well, the logging &lt;span class="caps"&gt;API&lt;/span&gt; actually does let you do this. &lt;code&gt;LogRecord&lt;/code&gt; objects can store a message string and an arbitrary set of parameter objects. The standard formatters will use &lt;code&gt;MessageFormat&lt;/code&gt; to construct the string that is finally logged. Here&amp;#8217;s an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestLog&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;TestLog&lt;/span&gt; &lt;span class="n"&gt;testLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TestLog&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;finest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testLog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;     &lt;span class="c1"&gt;// 1&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testLog&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 2&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// expensive string construction here&lt;/span&gt;
            &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000L&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the logger is configured to log at &lt;span class="caps"&gt;FINEST&lt;/span&gt; or below, the lines marked 1 and 2 behave identically and the message is logged. However, if the logger&amp;#8217;s level is above &lt;span class="caps"&gt;FINEST&lt;/span&gt;, then line 1 will take 5 seconds to do nothing and line 2 will just check the level and exit, without calling &lt;code&gt;toString&lt;/code&gt; at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;The advantage of logging this way is that you don&amp;#8217;t have to put all those &lt;code&gt;if&lt;/code&gt;s statements in. But there are disadvantages. You can&amp;#8217;t use the convenience logging methods like &lt;code&gt;severe&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt;, etc. You have to use one of the &lt;code&gt;log&lt;/code&gt; methods that accept &lt;code&gt;Object&lt;/code&gt; parameters. Unfortunate, but not too&amp;nbsp;egregious.&lt;/p&gt;
&lt;p&gt;The bigger disadvantage is that the string generation has to be inside a &lt;code&gt;toString&lt;/code&gt; method. While this can be done inside an anonymous inner class, the syntax for that isn&amp;#8217;t exactly convenient. If you have a bunch of log messages that are generated completely differently, then using anonymous inner classes everywhere will be far worse than just using the &lt;code&gt;if&lt;/code&gt; statements. Where it would make sense is if you have a bunch of log statements where the expensive portion of the message creation is the&amp;nbsp;same.&lt;/p&gt;
&lt;p&gt;For example, you could replace&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoggable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;finest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Stuff happened &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expensiveStringCreation&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoggable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;finest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Foo happened &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expensiveStringCreation&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoggable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;finest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bar happened &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expensiveStringCreation&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;msgFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;expensiveStringCreation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Stuff happened {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msgFactory&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Foo happened {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msgFactory&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;&lt;span class="caps"&gt;FINEST&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bar happened {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msgFactory&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;m assuming here that there&amp;#8217;s code in between these log calls that changes the state and hence the string returned by &lt;code&gt;expensiveStringCreation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot of talk at the moment about adding closures to Java. Whatever ends up being adopted, this is definitely one of the scenarios it should assist with (although what I&amp;#8217;m describing only requires the most basic capabilities of closures). I&amp;#8217;m a fan of the &lt;a href="http://crazybob.org/2006/10/java-closure-spectrum.html"&gt;&lt;span class="caps"&gt;CICE&lt;/span&gt;&lt;/a&gt; proposal, although some of the objections raised seem valid. The &lt;span class="caps"&gt;CICE&lt;/span&gt; proposal requires an interface with a single method, so if we did have the &lt;code&gt;LogMessageFactory&lt;/code&gt; interface I proposed above, we could just&amp;nbsp;do:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;finest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LogMessageFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Stuff happened &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expensiveStringCreation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="java"></category><category term="programming"></category></entry><entry><title>XML vsÂ Streams</title><link href="/xml-vs-streams.html" rel="alternate"></link><updated>2006-09-26T00:00:00+10:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2006-09-26:xml-vs-streams.html</id><summary type="html">&lt;p&gt;Ever get the feeling that &lt;span class="caps"&gt;XML&lt;/span&gt; sometimes makes things harder than they need to be? One of the problems that I and others have run into is that when parsing &lt;span class="caps"&gt;XML&lt;/span&gt; using &lt;span class="caps"&gt;SAX&lt;/span&gt; (or, in my case, using &lt;span class="caps"&gt;JAXB&lt;/span&gt; to unmarshall &lt;span class="caps"&gt;XML&lt;/span&gt;, which uses &lt;span class="caps"&gt;SAX&lt;/span&gt; under the hood) from an InputStream, the stream is always closed after the parsing is complete. This is surprising behaviour in Java, because you&amp;#8217;re not supposed to close streams you don&amp;#8217;t own. This can be a problem when &lt;a href="http://weblogs.java.net/blog/kohsuke/archive/2005/07/socket_xml_pitf.html"&gt;using network sockets&lt;/a&gt; or when you want to write two or more unrelated &lt;span class="caps"&gt;XML&lt;/span&gt; documents to the same&amp;nbsp;stream.&lt;/p&gt;
&lt;p&gt;The root cause of this isn&amp;#8217;t anything in Java or &lt;span class="caps"&gt;SAX&lt;/span&gt;, it&amp;#8217;s the &lt;span class="caps"&gt;XML&lt;/span&gt; specification itself. There&amp;#8217;s simply no way to tell when an &lt;span class="caps"&gt;XML&lt;/span&gt; document ends. Every well-formed &lt;span class="caps"&gt;XML&lt;/span&gt; document will have an end tag, so you&amp;#8217;d think the parser could simply stop when it reached the end tag. However, the &lt;span class="caps"&gt;XML&lt;/span&gt; specification allows for an arbitrary amount of comments and processing instructions to follow the main element. So when reading from a stream, the parser has no choice but to keep reading until it gets to the end of the stream. After reading to the end of the stream, &lt;span class="caps"&gt;SAX&lt;/span&gt; calls close on it. I believe the reason for this is that the stream has been completely read anyway, so there&amp;#8217;s no point keeping it&amp;nbsp;open.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve had a couple of cases where I&amp;#8217;ve wanted to write two or more independent &lt;span class="caps"&gt;XML&lt;/span&gt; documents to the same stream. In one case, I had a thread producing &lt;span class="caps"&gt;XML&lt;/span&gt; documents and writing them to a PipedOutputStream. Another thread would read from the corresponding PipedInputStream. The second case was a save file for an application that happened to include two unrelated &lt;span class="caps"&gt;XML&lt;/span&gt; documents. Because of the &amp;#8220;uncertain ending&amp;#8221; feature of the &lt;span class="caps"&gt;XML&lt;/span&gt; spec, neither of these things are&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;Not unless you use customised input and output streams, that is. After some searching, I found some classes from Xerces called &lt;a href="http://svn.apache.org/viewvc/xerces/java/trunk/samples/socket/io/WrappedOutputStream.java?revision=447688&amp;amp;amp;view=markup"&gt;WrappedOutputStream&lt;/a&gt; and &lt;a href="http://svn.apache.org/viewvc/xerces/java/trunk/samples/socket/io/WrappedInputStream.java?revision=447688&amp;amp;amp;view=markup"&gt;WrappedInputStream&lt;/a&gt; that allowed me to do what I wanted. They actually solve the more general problem of reading data of unknown length without reading too much. I ended up writing my own implementations, but I used the same &amp;#8220;protocol&amp;#8221; as these classes. I can now read and write &lt;span class="caps"&gt;XML&lt;/span&gt; over streams without having to use a new stream for each&amp;nbsp;document.&lt;/p&gt;</summary><category term="java"></category><category term="programming"></category></entry><entry><title>Javaâs clone mechanism is tehÂ suq</title><link href="/javas-clone-mechanism-is-teh-suq.html" rel="alternate"></link><updated>2006-03-27T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2006-03-27:javas-clone-mechanism-is-teh-suq.html</id><summary type="html">&lt;p&gt;Doing cloning properly in Java is way harder than it should be. I thought I knew all the traps, but recently found yet another. In a nutshell, making inner classes cloneable is almost always a bad idea. The reason is that inner classes have an internal reference to an instance of their enclosing class, which is implicitly final and can&amp;#8217;t be changed as part of a clone. For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Cloneable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Inner&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Inner&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Inner&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// A.&lt;/span&gt;
            &lt;span class="c1"&gt;// Cloned inner still refers to this Outer instance&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CloneNotSupportedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Inner&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Cloneable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// B. &lt;span class="caps"&gt;WARNING&lt;/span&gt;! - this does the Wrong Thing&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CloneNotSupportedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code is attempting to do a deep clone of an &lt;code&gt;Outer&lt;/code&gt; instance, which requires a deep clone of the &lt;code&gt;Inner&lt;/code&gt; it references. The problem occurs at B, because the object returned by &lt;code&gt;super.clone&lt;/code&gt; refers to the same &lt;code&gt;Outer&lt;/code&gt; instance as the original. So if you do&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Outer&lt;/span&gt; &lt;span class="n"&gt;outer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Outer&lt;/span&gt; &lt;span class="n"&gt;outer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;outer1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;outer2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// will change i in outer1 instead of outer2&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outer1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outer2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You&amp;nbsp;get:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because the cloned &lt;code&gt;outer2.inner&lt;/code&gt; has an internal reference to the original &lt;code&gt;outer1&lt;/code&gt; instance. There may be cases where you want it to work that way, but it seems very unlikely. So what to do? Calling &lt;code&gt;super.clone()&lt;/code&gt; from an inner class is basically broken, and there&amp;#8217;s no way to fix it. If you&amp;#8217;re able to make the inner class final, this can be avoided relatively easily by using a copy constructor to clone the inner class instead of &lt;code&gt;Object.clone&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Cloneable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Inner&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Inner&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Outer&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Outer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Inner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// C.&lt;/span&gt;
                  &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;qualified&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;constructor&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CloneNotSupportedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Inner&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// no longer Cloneable&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// &amp;quot;copy constructor&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;Inner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Inner&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;j&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives the desired output&amp;nbsp;of:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out the change at line C, it&amp;#8217;s actually valid syntax. It&amp;#8217;s called a &amp;#8220;qualified&amp;#8221; new, where you explicitly specify the enclosing instance of the new inner class&amp;nbsp;instance.&lt;/p&gt;
&lt;p&gt;Using copy constructors for cloning is only &lt;span class="caps"&gt;OK&lt;/span&gt; for final classes, because they aren&amp;#8217;t polymorphic. If we had sublcasses of Inner involved here, then it gets harder - &lt;code&gt;Object.clone&lt;/code&gt; is the only easy way to get the right class instantiated. &lt;a href="http://www.jetbrains.com/idea/"&gt;IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt;&lt;/a&gt; will actually give a warning on line C for this&amp;nbsp;reason.&lt;/p&gt;
&lt;p&gt;Another, possibly better, solution is to make &lt;code&gt;Inner&lt;/code&gt; a standard (non-inner) class with an explicit, non-final reference to its &lt;code&gt;Outer&lt;/code&gt; instance. Basically, do the inner class stuff by hand. Because the reference to the outer class isn&amp;#8217;t final, it can be fixed up before returning from &lt;code&gt;clone()&lt;/code&gt;. Of course, this lacks the convenience that was the motivation for inner classes in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://adtmag.com/articles/2000/03/14/effective-javasolutions-for-implementing-dependable-clone-methods.aspx?sc_lang=en"&gt;More info on Java&amp;#8217;s cloning woes&lt;/a&gt;.&lt;/p&gt;</summary><category term="java"></category><category term="programming"></category></entry><entry><title>HandlingÂ InvocationTargetException</title><link href="/handling-invocationtargetexception.html" rel="alternate"></link><updated>2005-12-23T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2005-12-23:handling-invocationtargetexception.html</id><summary type="html">&lt;p&gt;A quick hint on handling &lt;code&gt;java.lang.reflect.InvocationTargetException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This sucker is thrown whenever you invoke a method via reflection (typically via &lt;code&gt;Method.invoke&lt;/code&gt;), and that method throws any sort of exception. So it doesn&amp;#8217;t indicate a problem with the reflection mechanism, it is simply how the reflection mechanism notifies you of exceptions thrown by the method you&amp;nbsp;called.&lt;/p&gt;
&lt;p&gt;Whenever you catch this exception (and you will have to catch it at some level), the first thing you should do is call &lt;code&gt;getCause()&lt;/code&gt;. This returns the exception thrown from the method that was invoked via reflection, and that&amp;#8217;s what you care&amp;nbsp;about.&lt;/p&gt;</summary><category term="java"></category><category term="programming"></category></entry><entry><title>How Not to CatchÂ Exceptions</title><link href="/how-not-to-catch-exceptions.html" rel="alternate"></link><updated>2005-12-23T00:00:00+11:00</updated><author><name>Lachlan O'Dea</name></author><id>tag:,2005-12-23:how-not-to-catch-exceptions.html</id><summary type="html">&lt;p&gt;When it comes to bad Java practices, top of my list would have to be catching exceptions like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// stuff - anything really&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// maybe log it if you&amp;#39;re lucky&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is usually done because the &amp;#8220;stuff&amp;#8221; throws more than one kind of checked exception, and the code to handle each case is the same. So what&amp;#8217;s wrong with it? The biggest problem is that this not only catches the checked exceptions you&amp;#8217;re interested in, but also all &lt;code&gt;RuntimeException&lt;/code&gt;s. The vast majority of &lt;code&gt;RuntimeException&lt;/code&gt;s are only thrown from buggy code, and catching them is rarely a good idea. The above catch handles all kinds of exceptions the same way, regardless of whether it was caused by a bug or an ordinary failure that can happen from time to time when a program is running (e.g. a network failure). This only obscures&amp;nbsp;bugs.&lt;/p&gt;
&lt;p&gt;Consider the case where a bug causes a &lt;code&gt;NullPointerException&lt;/code&gt; to be thrown - perhaps the most common type of bug in Java. If the catch clause simply logs the exception message (not uncommon), then you have to check the log to have any idea why your app is misbehaving. And if you don&amp;#8217;t log the stack trace (again, not uncommon), you still won&amp;#8217;t have a clue what caused it. A much better option is to simply let &lt;code&gt;RuntimeException&lt;/code&gt;s go, which produces a screeching halt in your app and, in most cases, an immediate stack trace dump telling you exactly what happened. The details of what happens when you don&amp;#8217;t catch a &lt;code&gt;RuntimeException&lt;/code&gt; at all will vary depending on the environment you&amp;#8217;re running in, but it&amp;#8217;s always safe to do so. For example, servlet containers usually output the stack trace in the &lt;span class="caps"&gt;HTTP&lt;/span&gt; response when a servlet throws a &lt;code&gt;RuntimeException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A good principle of catching exceptions is to only catch the those specific exceptions that you can actually deal with.&amp;nbsp;E.g.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// stuff that throws AException&lt;/span&gt;
   &lt;span class="c1"&gt;// stuff that throws BException&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;AException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// deal&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;BException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// deal&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way just deals with the exceptions that you can sensibly recover from and lets any &lt;code&gt;RuntimeException&lt;/code&gt;s that indicate bugs to be thrown to the caller. If the code to handle both &lt;code&gt;AException&lt;/code&gt; and &lt;code&gt;BException&lt;/code&gt; is the same, you could always move it to a&amp;nbsp;method.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;But what if the code throws, like, 10 different kinds of checked exceptions?&amp;#8221;. I&amp;#8217;ve found it&amp;#8217;s actually pretty rare to have a block of code that throws more than about 4 unrelated checked exceptions. Some of the reflection APIs are pretty bad with this, however. It can be a pain to enter basically identical catch clauses for every one. A good alternative&amp;nbsp;is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// stuff that throws AException&lt;/span&gt;
   &lt;span class="c1"&gt;// stuff that throws BException&lt;/span&gt;
   &lt;span class="c1"&gt;// stuff that throws CException&lt;/span&gt;
   &lt;span class="c1"&gt;// stuff that throws DException&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// deal with all checked exceptions in the same way&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is actually not a bad way to get the best of both worlds (although I usually find it clearer to just handle each checked exception&amp;nbsp;individually).&lt;/p&gt;
&lt;p&gt;I think in hindsight, the inheritance hierarchy of exceptions is backwards. Instead of the &lt;code&gt;RuntimeException&lt;/code&gt; extends &lt;code&gt;Exception&lt;/code&gt; extends &lt;code&gt;Throwable&lt;/code&gt; hierarchy, it should have been &lt;code&gt;CheckedException&lt;/code&gt; extends &lt;code&gt;UncheckedException&lt;/code&gt; extends &lt;code&gt;Throwable&lt;/code&gt;. That would allow catching all checked exceptions in a single catch clause, while not obscuring unchecked exceptions thrown by buggy&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;In a similar vein, you almost never want to declare a method with &lt;code&gt;throws Exception&lt;/code&gt;. This is basically throwing away the whole checked exception system and saying &amp;#8220;this method can throw any kind of exception&amp;#8221;. This tends to make exception handling in the caller painful, and may give the caller no good option but to declare &lt;code&gt;throws Exception&lt;/code&gt; itself. Before long, you end up with all your methods declared as throwing &lt;code&gt;Exception&lt;/code&gt; and you have little indication of what exceptions you might actually have to deal with at runtime. (There is an argument to made that checked exceptions are a bad idea altogether, but that subject will have to wait for another&amp;nbsp;day.)&lt;/p&gt;
&lt;p&gt;There are a few cases where you might have a legitimate reason to catch &lt;code&gt;Exception&lt;/code&gt;, or &lt;code&gt;Error&lt;/code&gt;, or &lt;code&gt;Throwable&lt;/code&gt;. Here are some of&amp;nbsp;them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When implementing &lt;code&gt;Runnable&lt;/code&gt;. Reporting &lt;code&gt;RuntimeException&lt;/code&gt;s thrown from &lt;code&gt;Runnable.run&lt;/code&gt; is a bit of a pain in Java versions 1.4 and earlier. It&amp;#8217;s often easier just to catch them yourself and log the entire stack trace somewhere it can&amp;#8217;t be missed. Java 5 has a nicer mechanism for doing this,&amp;nbsp;however.&lt;/li&gt;
&lt;li&gt;When calling some sort of plug-in module. In this case, a bug in the plug-in doesn&amp;#8217;t mean the whole application needs to abort. You can catch the exception, notify the user, unload the plug-in and move&amp;nbsp;on.&lt;/li&gt;
&lt;li&gt;When dealing with poorly designed APIs that throw &lt;code&gt;Exception&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="java"></category><category term="programming"></category></entry></feed>